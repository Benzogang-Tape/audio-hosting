// Code generated by mockery v2.48.0. DO NOT EDIT.

package songsmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	postgres "github.com/Benzogang-Tape/audio-hosting/songs/internal/storage/postgres"

	uuid "github.com/google/uuid"
)

// SongRepo is an autogenerated mock type for the SongRepo type
type SongRepo struct {
	mock.Mock
}

type SongRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SongRepo) EXPECT() *SongRepo_Expecter {
	return &SongRepo_Expecter{mock: &_m.Mock}
}

// CountMySongs provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) CountMySongs(_a0 context.Context, _a1 uuid.UUID) (int32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CountMySongs")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongRepo_CountMySongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMySongs'
type SongRepo_CountMySongs_Call struct {
	*mock.Call
}

// CountMySongs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *SongRepo_Expecter) CountMySongs(_a0 interface{}, _a1 interface{}) *SongRepo_CountMySongs_Call {
	return &SongRepo_CountMySongs_Call{Call: _e.mock.On("CountMySongs", _a0, _a1)}
}

func (_c *SongRepo_CountMySongs_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *SongRepo_CountMySongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SongRepo_CountMySongs_Call) Return(_a0 int32, _a1 error) *SongRepo_CountMySongs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongRepo_CountMySongs_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int32, error)) *SongRepo_CountMySongs_Call {
	_c.Call.Return(run)
	return _c
}

// CountSongsMatchName provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) CountSongsMatchName(_a0 context.Context, _a1 string) (int32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CountSongsMatchName")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongRepo_CountSongsMatchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSongsMatchName'
type SongRepo_CountSongsMatchName_Call struct {
	*mock.Call
}

// CountSongsMatchName is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *SongRepo_Expecter) CountSongsMatchName(_a0 interface{}, _a1 interface{}) *SongRepo_CountSongsMatchName_Call {
	return &SongRepo_CountSongsMatchName_Call{Call: _e.mock.On("CountSongsMatchName", _a0, _a1)}
}

func (_c *SongRepo_CountSongsMatchName_Call) Run(run func(_a0 context.Context, _a1 string)) *SongRepo_CountSongsMatchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SongRepo_CountSongsMatchName_Call) Return(_a0 int32, _a1 error) *SongRepo_CountSongsMatchName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongRepo_CountSongsMatchName_Call) RunAndReturn(run func(context.Context, string) (int32, error)) *SongRepo_CountSongsMatchName_Call {
	_c.Call.Return(run)
	return _c
}

// CountSongsWithArtistsIds provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) CountSongsWithArtistsIds(_a0 context.Context, _a1 []uuid.UUID) (int32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CountSongsWithArtistsIds")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) (int32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) int32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongRepo_CountSongsWithArtistsIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSongsWithArtistsIds'
type SongRepo_CountSongsWithArtistsIds_Call struct {
	*mock.Call
}

// CountSongsWithArtistsIds is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []uuid.UUID
func (_e *SongRepo_Expecter) CountSongsWithArtistsIds(_a0 interface{}, _a1 interface{}) *SongRepo_CountSongsWithArtistsIds_Call {
	return &SongRepo_CountSongsWithArtistsIds_Call{Call: _e.mock.On("CountSongsWithArtistsIds", _a0, _a1)}
}

func (_c *SongRepo_CountSongsWithArtistsIds_Call) Run(run func(_a0 context.Context, _a1 []uuid.UUID)) *SongRepo_CountSongsWithArtistsIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *SongRepo_CountSongsWithArtistsIds_Call) Return(_a0 int32, _a1 error) *SongRepo_CountSongsWithArtistsIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongRepo_CountSongsWithArtistsIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) (int32, error)) *SongRepo_CountSongsWithArtistsIds_Call {
	_c.Call.Return(run)
	return _c
}

// MySongs provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) MySongs(_a0 context.Context, _a1 postgres.MySongsParams) ([]postgres.MySongsRow, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for MySongs")
	}

	var r0 []postgres.MySongsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.MySongsParams) ([]postgres.MySongsRow, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.MySongsParams) []postgres.MySongsRow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.MySongsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.MySongsParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongRepo_MySongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MySongs'
type SongRepo_MySongs_Call struct {
	*mock.Call
}

// MySongs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 postgres.MySongsParams
func (_e *SongRepo_Expecter) MySongs(_a0 interface{}, _a1 interface{}) *SongRepo_MySongs_Call {
	return &SongRepo_MySongs_Call{Call: _e.mock.On("MySongs", _a0, _a1)}
}

func (_c *SongRepo_MySongs_Call) Run(run func(_a0 context.Context, _a1 postgres.MySongsParams)) *SongRepo_MySongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.MySongsParams))
	})
	return _c
}

func (_c *SongRepo_MySongs_Call) Return(_a0 []postgres.MySongsRow, _a1 error) *SongRepo_MySongs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongRepo_MySongs_Call) RunAndReturn(run func(context.Context, postgres.MySongsParams) ([]postgres.MySongsRow, error)) *SongRepo_MySongs_Call {
	_c.Call.Return(run)
	return _c
}

// PatchSongs provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) PatchSongs(_a0 context.Context, _a1 postgres.PatchSongsParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PatchSongs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.PatchSongsParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongRepo_PatchSongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSongs'
type SongRepo_PatchSongs_Call struct {
	*mock.Call
}

// PatchSongs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 postgres.PatchSongsParams
func (_e *SongRepo_Expecter) PatchSongs(_a0 interface{}, _a1 interface{}) *SongRepo_PatchSongs_Call {
	return &SongRepo_PatchSongs_Call{Call: _e.mock.On("PatchSongs", _a0, _a1)}
}

func (_c *SongRepo_PatchSongs_Call) Run(run func(_a0 context.Context, _a1 postgres.PatchSongsParams)) *SongRepo_PatchSongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.PatchSongsParams))
	})
	return _c
}

func (_c *SongRepo_PatchSongs_Call) Return(_a0 error) *SongRepo_PatchSongs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongRepo_PatchSongs_Call) RunAndReturn(run func(context.Context, postgres.PatchSongsParams) error) *SongRepo_PatchSongs_Call {
	_c.Call.Return(run)
	return _c
}

// ReleasedSongs provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) ReleasedSongs(_a0 context.Context, _a1 postgres.ReleasedSongsParams) ([]postgres.ReleasedSongsRow, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ReleasedSongs")
	}

	var r0 []postgres.ReleasedSongsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.ReleasedSongsParams) ([]postgres.ReleasedSongsRow, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.ReleasedSongsParams) []postgres.ReleasedSongsRow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.ReleasedSongsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.ReleasedSongsParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongRepo_ReleasedSongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleasedSongs'
type SongRepo_ReleasedSongs_Call struct {
	*mock.Call
}

// ReleasedSongs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 postgres.ReleasedSongsParams
func (_e *SongRepo_Expecter) ReleasedSongs(_a0 interface{}, _a1 interface{}) *SongRepo_ReleasedSongs_Call {
	return &SongRepo_ReleasedSongs_Call{Call: _e.mock.On("ReleasedSongs", _a0, _a1)}
}

func (_c *SongRepo_ReleasedSongs_Call) Run(run func(_a0 context.Context, _a1 postgres.ReleasedSongsParams)) *SongRepo_ReleasedSongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.ReleasedSongsParams))
	})
	return _c
}

func (_c *SongRepo_ReleasedSongs_Call) Return(_a0 []postgres.ReleasedSongsRow, _a1 error) *SongRepo_ReleasedSongs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongRepo_ReleasedSongs_Call) RunAndReturn(run func(context.Context, postgres.ReleasedSongsParams) ([]postgres.ReleasedSongsRow, error)) *SongRepo_ReleasedSongs_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSong provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) SaveSong(_a0 context.Context, _a1 postgres.SaveSongParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveSong")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.SaveSongParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongRepo_SaveSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSong'
type SongRepo_SaveSong_Call struct {
	*mock.Call
}

// SaveSong is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 postgres.SaveSongParams
func (_e *SongRepo_Expecter) SaveSong(_a0 interface{}, _a1 interface{}) *SongRepo_SaveSong_Call {
	return &SongRepo_SaveSong_Call{Call: _e.mock.On("SaveSong", _a0, _a1)}
}

func (_c *SongRepo_SaveSong_Call) Run(run func(_a0 context.Context, _a1 postgres.SaveSongParams)) *SongRepo_SaveSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.SaveSongParams))
	})
	return _c
}

func (_c *SongRepo_SaveSong_Call) Return(_a0 error) *SongRepo_SaveSong_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongRepo_SaveSong_Call) RunAndReturn(run func(context.Context, postgres.SaveSongParams) error) *SongRepo_SaveSong_Call {
	_c.Call.Return(run)
	return _c
}

// Song provides a mock function with given fields: _a0, _a1
func (_m *SongRepo) Song(_a0 context.Context, _a1 uuid.UUID) (postgres.SongRow, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Song")
	}

	var r0 postgres.SongRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (postgres.SongRow, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) postgres.SongRow); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(postgres.SongRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongRepo_Song_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Song'
type SongRepo_Song_Call struct {
	*mock.Call
}

// Song is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *SongRepo_Expecter) Song(_a0 interface{}, _a1 interface{}) *SongRepo_Song_Call {
	return &SongRepo_Song_Call{Call: _e.mock.On("Song", _a0, _a1)}
}

func (_c *SongRepo_Song_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *SongRepo_Song_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SongRepo_Song_Call) Return(_a0 postgres.SongRow, _a1 error) *SongRepo_Song_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongRepo_Song_Call) RunAndReturn(run func(context.Context, uuid.UUID) (postgres.SongRow, error)) *SongRepo_Song_Call {
	_c.Call.Return(run)
	return _c
}

// NewSongRepo creates a new instance of SongRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongRepo {
	mock := &SongRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
