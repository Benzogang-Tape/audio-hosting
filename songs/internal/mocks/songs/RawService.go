// Code generated by mockery v2.48.0. DO NOT EDIT.

package songsmocks

import mock "github.com/stretchr/testify/mock"

// RawService is an autogenerated mock type for the RawService type
type RawService struct {
	mock.Mock
}

type RawService_Expecter struct {
	mock *mock.Mock
}

func (_m *RawService) EXPECT() *RawService_Expecter {
	return &RawService_Expecter{mock: &_m.Mock}
}

// SongUrl provides a mock function with given fields: rawSongId
func (_m *RawService) SongUrl(rawSongId string) string {
	ret := _m.Called(rawSongId)

	if len(ret) == 0 {
		panic("no return value specified for SongUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(rawSongId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RawService_SongUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SongUrl'
type RawService_SongUrl_Call struct {
	*mock.Call
}

// SongUrl is a helper method to define mock.On call
//   - rawSongId string
func (_e *RawService_Expecter) SongUrl(rawSongId interface{}) *RawService_SongUrl_Call {
	return &RawService_SongUrl_Call{Call: _e.mock.On("SongUrl", rawSongId)}
}

func (_c *RawService_SongUrl_Call) Run(run func(rawSongId string)) *RawService_SongUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RawService_SongUrl_Call) Return(_a0 string) *RawService_SongUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawService_SongUrl_Call) RunAndReturn(run func(string) string) *RawService_SongUrl_Call {
	_c.Call.Return(run)
	return _c
}

// NewRawService creates a new instance of RawService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRawService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RawService {
	mock := &RawService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
