// Code generated by mockery v2.48.0. DO NOT EDIT.

package songsmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	users "github.com/Benzogang-Tape/audio-hosting/songs/internal/clients/users"

	uuid "github.com/google/uuid"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// ArtistsByIds provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) ArtistsByIds(_a0 context.Context, _a1 []uuid.UUID) ([]users.Artist, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ArtistsByIds")
	}

	var r0 []users.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]users.Artist, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []users.Artist); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_ArtistsByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArtistsByIds'
type UserRepo_ArtistsByIds_Call struct {
	*mock.Call
}

// ArtistsByIds is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []uuid.UUID
func (_e *UserRepo_Expecter) ArtistsByIds(_a0 interface{}, _a1 interface{}) *UserRepo_ArtistsByIds_Call {
	return &UserRepo_ArtistsByIds_Call{Call: _e.mock.On("ArtistsByIds", _a0, _a1)}
}

func (_c *UserRepo_ArtistsByIds_Call) Run(run func(_a0 context.Context, _a1 []uuid.UUID)) *UserRepo_ArtistsByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *UserRepo_ArtistsByIds_Call) Return(_a0 []users.Artist, _a1 error) *UserRepo_ArtistsByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_ArtistsByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]users.Artist, error)) *UserRepo_ArtistsByIds_Call {
	_c.Call.Return(run)
	return _c
}

// ArtistsMatchingName provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) ArtistsMatchingName(_a0 context.Context, _a1 string) ([]users.Artist, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ArtistsMatchingName")
	}

	var r0 []users.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]users.Artist, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []users.Artist); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_ArtistsMatchingName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArtistsMatchingName'
type UserRepo_ArtistsMatchingName_Call struct {
	*mock.Call
}

// ArtistsMatchingName is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *UserRepo_Expecter) ArtistsMatchingName(_a0 interface{}, _a1 interface{}) *UserRepo_ArtistsMatchingName_Call {
	return &UserRepo_ArtistsMatchingName_Call{Call: _e.mock.On("ArtistsMatchingName", _a0, _a1)}
}

func (_c *UserRepo_ArtistsMatchingName_Call) Run(run func(_a0 context.Context, _a1 string)) *UserRepo_ArtistsMatchingName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_ArtistsMatchingName_Call) Return(_a0 []users.Artist, _a1 error) *UserRepo_ArtistsMatchingName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_ArtistsMatchingName_Call) RunAndReturn(run func(context.Context, string) ([]users.Artist, error)) *UserRepo_ArtistsMatchingName_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
