// Code generated by mockery v2.48.0. DO NOT EDIT.

package rawmocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	s3minio "github.com/Benzogang-Tape/audio-hosting/songs/internal/storage/s3minio"
)

// ObjectStorage is an autogenerated mock type for the ObjectStorage type
type ObjectStorage struct {
	mock.Mock
}

type ObjectStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *ObjectStorage) EXPECT() *ObjectStorage_Expecter {
	return &ObjectStorage_Expecter{mock: &_m.Mock}
}

// GetImageObject provides a mock function with given fields: ctx, id
func (_m *ObjectStorage) GetImageObject(ctx context.Context, id string) (io.Reader, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetImageObject")
	}

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.Reader, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Reader); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectStorage_GetImageObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageObject'
type ObjectStorage_GetImageObject_Call struct {
	*mock.Call
}

// GetImageObject is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ObjectStorage_Expecter) GetImageObject(ctx interface{}, id interface{}) *ObjectStorage_GetImageObject_Call {
	return &ObjectStorage_GetImageObject_Call{Call: _e.mock.On("GetImageObject", ctx, id)}
}

func (_c *ObjectStorage_GetImageObject_Call) Run(run func(ctx context.Context, id string)) *ObjectStorage_GetImageObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ObjectStorage_GetImageObject_Call) Return(_a0 io.Reader, _a1 error) *ObjectStorage_GetImageObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ObjectStorage_GetImageObject_Call) RunAndReturn(run func(context.Context, string) (io.Reader, error)) *ObjectStorage_GetImageObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetSongObject provides a mock function with given fields: ctx, id
func (_m *ObjectStorage) GetSongObject(ctx context.Context, id string) (io.Reader, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSongObject")
	}

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.Reader, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Reader); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectStorage_GetSongObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSongObject'
type ObjectStorage_GetSongObject_Call struct {
	*mock.Call
}

// GetSongObject is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ObjectStorage_Expecter) GetSongObject(ctx interface{}, id interface{}) *ObjectStorage_GetSongObject_Call {
	return &ObjectStorage_GetSongObject_Call{Call: _e.mock.On("GetSongObject", ctx, id)}
}

func (_c *ObjectStorage_GetSongObject_Call) Run(run func(ctx context.Context, id string)) *ObjectStorage_GetSongObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ObjectStorage_GetSongObject_Call) Return(_a0 io.Reader, _a1 error) *ObjectStorage_GetSongObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ObjectStorage_GetSongObject_Call) RunAndReturn(run func(context.Context, string) (io.Reader, error)) *ObjectStorage_GetSongObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutImageObject provides a mock function with given fields: ctx, image
func (_m *ObjectStorage) PutImageObject(ctx context.Context, image s3minio.ImageObject) error {
	ret := _m.Called(ctx, image)

	if len(ret) == 0 {
		panic("no return value specified for PutImageObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, s3minio.ImageObject) error); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectStorage_PutImageObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutImageObject'
type ObjectStorage_PutImageObject_Call struct {
	*mock.Call
}

// PutImageObject is a helper method to define mock.On call
//   - ctx context.Context
//   - image s3minio.ImageObject
func (_e *ObjectStorage_Expecter) PutImageObject(ctx interface{}, image interface{}) *ObjectStorage_PutImageObject_Call {
	return &ObjectStorage_PutImageObject_Call{Call: _e.mock.On("PutImageObject", ctx, image)}
}

func (_c *ObjectStorage_PutImageObject_Call) Run(run func(ctx context.Context, image s3minio.ImageObject)) *ObjectStorage_PutImageObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(s3minio.ImageObject))
	})
	return _c
}

func (_c *ObjectStorage_PutImageObject_Call) Return(_a0 error) *ObjectStorage_PutImageObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_PutImageObject_Call) RunAndReturn(run func(context.Context, s3minio.ImageObject) error) *ObjectStorage_PutImageObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutSongObject provides a mock function with given fields: _a0, _a1
func (_m *ObjectStorage) PutSongObject(_a0 context.Context, _a1 s3minio.SongObject) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PutSongObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, s3minio.SongObject) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectStorage_PutSongObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSongObject'
type ObjectStorage_PutSongObject_Call struct {
	*mock.Call
}

// PutSongObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 s3minio.SongObject
func (_e *ObjectStorage_Expecter) PutSongObject(_a0 interface{}, _a1 interface{}) *ObjectStorage_PutSongObject_Call {
	return &ObjectStorage_PutSongObject_Call{Call: _e.mock.On("PutSongObject", _a0, _a1)}
}

func (_c *ObjectStorage_PutSongObject_Call) Run(run func(_a0 context.Context, _a1 s3minio.SongObject)) *ObjectStorage_PutSongObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(s3minio.SongObject))
	})
	return _c
}

func (_c *ObjectStorage_PutSongObject_Call) Return(_a0 error) *ObjectStorage_PutSongObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_PutSongObject_Call) RunAndReturn(run func(context.Context, s3minio.SongObject) error) *ObjectStorage_PutSongObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewObjectStorage creates a new instance of ObjectStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObjectStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObjectStorage {
	mock := &ObjectStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
