// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/types.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _types_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UploadRawSongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadRawSongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRawSongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadRawSongRequestMultiError, or nil if none found.
func (m *UploadRawSongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRawSongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetFilePart()); l < 1 || l > 1048576 {
		err := UploadRawSongRequestValidationError{
			field:  "FilePart",
			reason: "value length must be between 1 and 1048576 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extension

	if err := m._validateUuid(m.GetSongId()); err != nil {
		err = UploadRawSongRequestValidationError{
			field:  "SongId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UploadRawSongRequestMultiError(errors)
	}

	return nil
}

func (m *UploadRawSongRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UploadRawSongRequestMultiError is an error wrapping multiple validation
// errors returned by UploadRawSongRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadRawSongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRawSongRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRawSongRequestMultiError) AllErrors() []error { return m }

// UploadRawSongRequestValidationError is the validation error returned by
// UploadRawSongRequest.Validate if the designated constraints aren't met.
type UploadRawSongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRawSongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRawSongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRawSongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRawSongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRawSongRequestValidationError) ErrorName() string {
	return "UploadRawSongRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRawSongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRawSongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRawSongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRawSongRequestValidationError{}

// Validate checks the field values on UploadRawSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadRawSongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRawSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadRawSongResponseMultiError, or nil if none found.
func (m *UploadRawSongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRawSongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	if len(errors) > 0 {
		return UploadRawSongResponseMultiError(errors)
	}

	return nil
}

// UploadRawSongResponseMultiError is an error wrapping multiple validation
// errors returned by UploadRawSongResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadRawSongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRawSongResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRawSongResponseMultiError) AllErrors() []error { return m }

// UploadRawSongResponseValidationError is the validation error returned by
// UploadRawSongResponse.Validate if the designated constraints aren't met.
type UploadRawSongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRawSongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRawSongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRawSongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRawSongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRawSongResponseValidationError) ErrorName() string {
	return "UploadRawSongResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRawSongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRawSongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRawSongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRawSongResponseValidationError{}

// Validate checks the field values on GetRawSongRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRawSongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawSongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRawSongRequestMultiError, or nil if none found.
func (m *GetRawSongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawSongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RawSongId

	if len(errors) > 0 {
		return GetRawSongRequestMultiError(errors)
	}

	return nil
}

// GetRawSongRequestMultiError is an error wrapping multiple validation errors
// returned by GetRawSongRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRawSongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawSongRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawSongRequestMultiError) AllErrors() []error { return m }

// GetRawSongRequestValidationError is the validation error returned by
// GetRawSongRequest.Validate if the designated constraints aren't met.
type GetRawSongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawSongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawSongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawSongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawSongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawSongRequestValidationError) ErrorName() string {
	return "GetRawSongRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawSongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawSongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawSongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawSongRequestValidationError{}

// Validate checks the field values on GetRawSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRawSongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRawSongResponseMultiError, or nil if none found.
func (m *GetRawSongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawSongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePart

	if len(errors) > 0 {
		return GetRawSongResponseMultiError(errors)
	}

	return nil
}

// GetRawSongResponseMultiError is an error wrapping multiple validation errors
// returned by GetRawSongResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRawSongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawSongResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawSongResponseMultiError) AllErrors() []error { return m }

// GetRawSongResponseValidationError is the validation error returned by
// GetRawSongResponse.Validate if the designated constraints aren't met.
type GetRawSongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawSongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawSongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawSongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawSongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawSongResponseValidationError) ErrorName() string {
	return "GetRawSongResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawSongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawSongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawSongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawSongResponseValidationError{}

// Validate checks the field values on UploadRawSongImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadRawSongImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRawSongImageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadRawSongImageRequestMultiError, or nil if none found.
func (m *UploadRawSongImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRawSongImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetFilePart()); l < 1 || l > 1048576 {
		err := UploadRawSongImageRequestValidationError{
			field:  "FilePart",
			reason: "value length must be between 1 and 1048576 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extension

	if err := m._validateUuid(m.GetSongId()); err != nil {
		err = UploadRawSongImageRequestValidationError{
			field:  "SongId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UploadRawSongImageRequestMultiError(errors)
	}

	return nil
}

func (m *UploadRawSongImageRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UploadRawSongImageRequestMultiError is an error wrapping multiple validation
// errors returned by UploadRawSongImageRequest.ValidateAll() if the
// designated constraints aren't met.
type UploadRawSongImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRawSongImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRawSongImageRequestMultiError) AllErrors() []error { return m }

// UploadRawSongImageRequestValidationError is the validation error returned by
// UploadRawSongImageRequest.Validate if the designated constraints aren't met.
type UploadRawSongImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRawSongImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRawSongImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRawSongImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRawSongImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRawSongImageRequestValidationError) ErrorName() string {
	return "UploadRawSongImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRawSongImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRawSongImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRawSongImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRawSongImageRequestValidationError{}

// Validate checks the field values on UploadRawSongImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadRawSongImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRawSongImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadRawSongImageResponseMultiError, or nil if none found.
func (m *UploadRawSongImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRawSongImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	if len(errors) > 0 {
		return UploadRawSongImageResponseMultiError(errors)
	}

	return nil
}

// UploadRawSongImageResponseMultiError is an error wrapping multiple
// validation errors returned by UploadRawSongImageResponse.ValidateAll() if
// the designated constraints aren't met.
type UploadRawSongImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRawSongImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRawSongImageResponseMultiError) AllErrors() []error { return m }

// UploadRawSongImageResponseValidationError is the validation error returned
// by UploadRawSongImageResponse.Validate if the designated constraints aren't met.
type UploadRawSongImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRawSongImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRawSongImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRawSongImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRawSongImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRawSongImageResponseValidationError) ErrorName() string {
	return "UploadRawSongImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRawSongImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRawSongImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRawSongImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRawSongImageResponseValidationError{}

// Validate checks the field values on GetRawSongImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRawSongImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawSongImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRawSongImageRequestMultiError, or nil if none found.
func (m *GetRawSongImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawSongImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RawImageId

	if len(errors) > 0 {
		return GetRawSongImageRequestMultiError(errors)
	}

	return nil
}

// GetRawSongImageRequestMultiError is an error wrapping multiple validation
// errors returned by GetRawSongImageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRawSongImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawSongImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawSongImageRequestMultiError) AllErrors() []error { return m }

// GetRawSongImageRequestValidationError is the validation error returned by
// GetRawSongImageRequest.Validate if the designated constraints aren't met.
type GetRawSongImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawSongImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawSongImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawSongImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawSongImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawSongImageRequestValidationError) ErrorName() string {
	return "GetRawSongImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawSongImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawSongImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawSongImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawSongImageRequestValidationError{}

// Validate checks the field values on GetRawSongImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRawSongImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawSongImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRawSongImageResponseMultiError, or nil if none found.
func (m *GetRawSongImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawSongImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePart

	if len(errors) > 0 {
		return GetRawSongImageResponseMultiError(errors)
	}

	return nil
}

// GetRawSongImageResponseMultiError is an error wrapping multiple validation
// errors returned by GetRawSongImageResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRawSongImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawSongImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawSongImageResponseMultiError) AllErrors() []error { return m }

// GetRawSongImageResponseValidationError is the validation error returned by
// GetRawSongImageResponse.Validate if the designated constraints aren't met.
type GetRawSongImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawSongImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawSongImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawSongImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawSongImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawSongImageResponseValidationError) ErrorName() string {
	return "GetRawSongImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawSongImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawSongImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawSongImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawSongImageResponseValidationError{}

// Validate checks the field values on CreateSongRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSongRequestMultiError, or nil if none found.
func (m *CreateSongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 256 {
		err := CreateSongRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFeatArtistsIds()) > 16 {
		err := CreateSongRequestValidationError{
			field:  "FeatArtistsIds",
			reason: "value must contain no more than 16 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFeatArtistsIds() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = CreateSongRequestValidationError{
				field:  fmt.Sprintf("FeatArtistsIds[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ImageUrl != nil {

		if uri, err := url.Parse(m.GetImageUrl()); err != nil {
			err = CreateSongRequestValidationError{
				field:  "ImageUrl",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := CreateSongRequestValidationError{
				field:  "ImageUrl",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateSongRequestMultiError(errors)
	}

	return nil
}

func (m *CreateSongRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateSongRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSongRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSongRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSongRequestMultiError) AllErrors() []error { return m }

// CreateSongRequestValidationError is the validation error returned by
// CreateSongRequest.Validate if the designated constraints aren't met.
type CreateSongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSongRequestValidationError) ErrorName() string {
	return "CreateSongRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSongRequestValidationError{}

// Validate checks the field values on CreateSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSongResponseMultiError, or nil if none found.
func (m *CreateSongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSinger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSongResponseValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSongResponseValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSinger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSongResponseValidationError{
				field:  "Singer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	for idx, item := range m.GetArtists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSongResponseValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSongResponseValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSongResponseValidationError{
					field:  fmt.Sprintf("Artists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUploadedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSongResponseValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSongResponseValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUploadedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSongResponseValidationError{
				field:  "UploadedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ImageUrl != nil {
		// no validation rules for ImageUrl
	}

	if len(errors) > 0 {
		return CreateSongResponseMultiError(errors)
	}

	return nil
}

// CreateSongResponseMultiError is an error wrapping multiple validation errors
// returned by CreateSongResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateSongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSongResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSongResponseMultiError) AllErrors() []error { return m }

// CreateSongResponseValidationError is the validation error returned by
// CreateSongResponse.Validate if the designated constraints aren't met.
type CreateSongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSongResponseValidationError) ErrorName() string {
	return "CreateSongResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSongResponseValidationError{}

// Validate checks the field values on GetSongRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSongRequestMultiError,
// or nil if none found.
func (m *GetSongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetSongRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSongRequestMultiError(errors)
	}

	return nil
}

func (m *GetSongRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetSongRequestMultiError is an error wrapping multiple validation errors
// returned by GetSongRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongRequestMultiError) AllErrors() []error { return m }

// GetSongRequestValidationError is the validation error returned by
// GetSongRequest.Validate if the designated constraints aren't met.
type GetSongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongRequestValidationError) ErrorName() string { return "GetSongRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongRequestValidationError{}

// Validate checks the field values on GetSongResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSongResponseMultiError, or nil if none found.
func (m *GetSongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSong()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSongResponseValidationError{
					field:  "Song",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSongResponseValidationError{
					field:  "Song",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSong()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSongResponseValidationError{
				field:  "Song",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSongResponseMultiError(errors)
	}

	return nil
}

// GetSongResponseMultiError is an error wrapping multiple validation errors
// returned by GetSongResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongResponseMultiError) AllErrors() []error { return m }

// GetSongResponseValidationError is the validation error returned by
// GetSongResponse.Validate if the designated constraints aren't met.
type GetSongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongResponseValidationError) ErrorName() string { return "GetSongResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongResponseValidationError{}

// Validate checks the field values on UpdateSongRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSongRequestMultiError, or nil if none found.
func (m *UpdateSongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateSongRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 256 {
		err := UpdateSongRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ImageUrl != nil {

		if uri, err := url.Parse(m.GetImageUrl()); err != nil {
			err = UpdateSongRequestValidationError{
				field:  "ImageUrl",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := UpdateSongRequestValidationError{
				field:  "ImageUrl",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateSongRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateSongRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateSongRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateSongRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateSongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSongRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSongRequestMultiError) AllErrors() []error { return m }

// UpdateSongRequestValidationError is the validation error returned by
// UpdateSongRequest.Validate if the designated constraints aren't met.
type UpdateSongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSongRequestValidationError) ErrorName() string {
	return "UpdateSongRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSongRequestValidationError{}

// Validate checks the field values on UpdateSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSongResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSongResponseMultiError, or nil if none found.
func (m *UpdateSongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSongResponseMultiError(errors)
	}

	return nil
}

// UpdateSongResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateSongResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateSongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSongResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSongResponseMultiError) AllErrors() []error { return m }

// UpdateSongResponseValidationError is the validation error returned by
// UpdateSongResponse.Validate if the designated constraints aren't met.
type UpdateSongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSongResponseValidationError) ErrorName() string {
	return "UpdateSongResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSongResponseValidationError{}

// Validate checks the field values on DeleteSongsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSongsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSongsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSongsRequestMultiError, or nil if none found.
func (m *DeleteSongsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSongsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 1000 {
		err := DeleteSongsRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 1000 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = DeleteSongsRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteSongsRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteSongsRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteSongsRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteSongsRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteSongsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSongsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSongsRequestMultiError) AllErrors() []error { return m }

// DeleteSongsRequestValidationError is the validation error returned by
// DeleteSongsRequest.Validate if the designated constraints aren't met.
type DeleteSongsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSongsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSongsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSongsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSongsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSongsRequestValidationError) ErrorName() string {
	return "DeleteSongsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSongsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSongsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSongsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSongsRequestValidationError{}

// Validate checks the field values on DeleteSongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSongsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSongsResponseMultiError, or nil if none found.
func (m *DeleteSongsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSongsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSongsResponseMultiError(errors)
	}

	return nil
}

// DeleteSongsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSongsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSongsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSongsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSongsResponseMultiError) AllErrors() []error { return m }

// DeleteSongsResponseValidationError is the validation error returned by
// DeleteSongsResponse.Validate if the designated constraints aren't met.
type DeleteSongsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSongsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSongsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSongsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSongsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSongsResponseValidationError) ErrorName() string {
	return "DeleteSongsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSongsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSongsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSongsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSongsResponseValidationError{}

// Validate checks the field values on Song with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Song) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Song with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SongMultiError, or nil if none found.
func (m *Song) ValidateAll() error {
	return m.validate(true)
}

func (m *Song) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSinger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSinger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SongValidationError{
				field:  "Singer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArtists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SongValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SongValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SongValidationError{
					field:  fmt.Sprintf("Artists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	// no validation rules for SongUrl

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SongValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WeightBytes

	if all {
		switch v := interface{}(m.GetReleasedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "ReleasedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "ReleasedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReleasedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SongValidationError{
				field:  "ReleasedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUploadedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SongValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUploadedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SongValidationError{
				field:  "UploadedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ImageUrl != nil {
		// no validation rules for ImageUrl
	}

	if len(errors) > 0 {
		return SongMultiError(errors)
	}

	return nil
}

// SongMultiError is an error wrapping multiple validation errors returned by
// Song.ValidateAll() if the designated constraints aren't met.
type SongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SongMultiError) AllErrors() []error { return m }

// SongValidationError is the validation error returned by Song.Validate if the
// designated constraints aren't met.
type SongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SongValidationError) ErrorName() string { return "SongValidationError" }

// Error satisfies the builtin error interface
func (e SongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SongValidationError{}

// Validate checks the field values on MySong with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MySong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MySong with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MySongMultiError, or nil if none found.
func (m *MySong) ValidateAll() error {
	return m.validate(true)
}

func (m *MySong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSinger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MySongValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MySongValidationError{
					field:  "Singer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSinger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MySongValidationError{
				field:  "Singer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArtists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MySongValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MySongValidationError{
						field:  fmt.Sprintf("Artists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MySongValidationError{
					field:  fmt.Sprintf("Artists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetUploadedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MySongValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MySongValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUploadedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MySongValidationError{
				field:  "UploadedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SongUrl != nil {
		// no validation rules for SongUrl
	}

	if m.ImageUrl != nil {
		// no validation rules for ImageUrl
	}

	if m.Duration != nil {

		if all {
			switch v := interface{}(m.GetDuration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MySongValidationError{
						field:  "Duration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MySongValidationError{
						field:  "Duration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MySongValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.WeightBytes != nil {
		// no validation rules for WeightBytes
	}

	if m.ReleasedAt != nil {

		if all {
			switch v := interface{}(m.GetReleasedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MySongValidationError{
						field:  "ReleasedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MySongValidationError{
						field:  "ReleasedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReleasedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MySongValidationError{
					field:  "ReleasedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MySongMultiError(errors)
	}

	return nil
}

// MySongMultiError is an error wrapping multiple validation errors returned by
// MySong.ValidateAll() if the designated constraints aren't met.
type MySongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MySongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MySongMultiError) AllErrors() []error { return m }

// MySongValidationError is the validation error returned by MySong.Validate if
// the designated constraints aren't met.
type MySongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MySongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MySongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MySongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MySongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MySongValidationError) ErrorName() string { return "MySongValidationError" }

// Error satisfies the builtin error interface
func (e MySongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMySong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MySongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MySongValidationError{}

// Validate checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationResponseMultiError, or nil if none found.
func (m *PaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastPage

	if len(errors) > 0 {
		return PaginationResponseMultiError(errors)
	}

	return nil
}

// PaginationResponseMultiError is an error wrapping multiple validation errors
// returned by PaginationResponse.ValidateAll() if the designated constraints
// aren't met.
type PaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationResponseMultiError) AllErrors() []error { return m }

// PaginationResponseValidationError is the validation error returned by
// PaginationResponse.Validate if the designated constraints aren't met.
type PaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationResponseValidationError) ErrorName() string {
	return "PaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationResponseValidationError{}

// Validate checks the field values on GetSongsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSongsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSongsRequestMultiError, or nil if none found.
func (m *GetSongsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) > 0 {

		if len(m.GetIds()) > 2000 {
			err := GetSongsRequestValidationError{
				field:  "Ids",
				reason: "value must contain no more than 2000 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Page != nil {

		if m.GetPage() < 0 {
			err := GetSongsRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if m.GetPageSize() > 1000 {
			err := GetSongsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ArtistId != nil {

		if m.GetArtistId() != "" {

			if err := m._validateUuid(m.GetArtistId()); err != nil {
				err = GetSongsRequestValidationError{
					field:  "ArtistId",
					reason: "value must be a valid UUID",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.MatchArtist != nil {
		// no validation rules for MatchArtist
	}

	if m.MatchName != nil {

		if m.GetMatchName() != "" {

			if l := utf8.RuneCountInString(m.GetMatchName()); l < 1 || l > 64 {
				err := GetSongsRequestValidationError{
					field:  "MatchName",
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return GetSongsRequestMultiError(errors)
	}

	return nil
}

func (m *GetSongsRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetSongsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSongsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSongsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongsRequestMultiError) AllErrors() []error { return m }

// GetSongsRequestValidationError is the validation error returned by
// GetSongsRequest.Validate if the designated constraints aren't met.
type GetSongsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongsRequestValidationError) ErrorName() string { return "GetSongsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSongsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongsRequestValidationError{}

// Validate checks the field values on GetSongsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSongsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSongsResponseMultiError, or nil if none found.
func (m *GetSongsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSongsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSongs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSongsResponseValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSongsResponseValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSongsResponseValidationError{
					field:  fmt.Sprintf("Songs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSongsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSongsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSongsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSongsResponseMultiError(errors)
	}

	return nil
}

// GetSongsResponseMultiError is an error wrapping multiple validation errors
// returned by GetSongsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSongsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSongsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSongsResponseMultiError) AllErrors() []error { return m }

// GetSongsResponseValidationError is the validation error returned by
// GetSongsResponse.Validate if the designated constraints aren't met.
type GetSongsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSongsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSongsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSongsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSongsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSongsResponseValidationError) ErrorName() string { return "GetSongsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSongsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSongsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSongsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSongsResponseValidationError{}

// Validate checks the field values on GetMySongsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMySongsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMySongsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMySongsRequestMultiError, or nil if none found.
func (m *GetMySongsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMySongsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) > 0 {

		if l := len(m.GetIds()); l < 1 || l > 2000 {
			err := GetMySongsRequestValidationError{
				field:  "Ids",
				reason: "value must contain between 1 and 2000 items, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		for idx, item := range m.GetIds() {
			_, _ = idx, item

			if err := m._validateUuid(item); err != nil {
				err = GetMySongsRequestValidationError{
					field:  fmt.Sprintf("Ids[%v]", idx),
					reason: "value must be a valid UUID",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Page != nil {

		if m.GetPage() < 0 {
			err := GetMySongsRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if val := m.GetPageSize(); val < 1 || val > 1000 {
			err := GetMySongsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 1000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetMySongsRequestMultiError(errors)
	}

	return nil
}

func (m *GetMySongsRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetMySongsRequestMultiError is an error wrapping multiple validation errors
// returned by GetMySongsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMySongsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMySongsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMySongsRequestMultiError) AllErrors() []error { return m }

// GetMySongsRequestValidationError is the validation error returned by
// GetMySongsRequest.Validate if the designated constraints aren't met.
type GetMySongsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMySongsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMySongsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMySongsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMySongsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMySongsRequestValidationError) ErrorName() string {
	return "GetMySongsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMySongsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMySongsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMySongsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMySongsRequestValidationError{}

// Validate checks the field values on GetMySongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMySongsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMySongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMySongsResponseMultiError, or nil if none found.
func (m *GetMySongsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMySongsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSongs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMySongsResponseValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMySongsResponseValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMySongsResponseValidationError{
					field:  fmt.Sprintf("Songs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMySongsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMySongsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMySongsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMySongsResponseMultiError(errors)
	}

	return nil
}

// GetMySongsResponseMultiError is an error wrapping multiple validation errors
// returned by GetMySongsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMySongsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMySongsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMySongsResponseMultiError) AllErrors() []error { return m }

// GetMySongsResponseValidationError is the validation error returned by
// GetMySongsResponse.Validate if the designated constraints aren't met.
type GetMySongsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMySongsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMySongsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMySongsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMySongsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMySongsResponseValidationError) ErrorName() string {
	return "GetMySongsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMySongsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMySongsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMySongsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMySongsResponseValidationError{}

// Validate checks the field values on ReleaseSongsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseSongsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseSongsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseSongsRequestMultiError, or nil if none found.
func (m *ReleaseSongsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseSongsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 2000 {
		err := ReleaseSongsRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 2000 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = ReleaseSongsRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Notify

	if len(errors) > 0 {
		return ReleaseSongsRequestMultiError(errors)
	}

	return nil
}

func (m *ReleaseSongsRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ReleaseSongsRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseSongsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseSongsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseSongsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseSongsRequestMultiError) AllErrors() []error { return m }

// ReleaseSongsRequestValidationError is the validation error returned by
// ReleaseSongsRequest.Validate if the designated constraints aren't met.
type ReleaseSongsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseSongsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseSongsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseSongsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseSongsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseSongsRequestValidationError) ErrorName() string {
	return "ReleaseSongsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseSongsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseSongsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseSongsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseSongsRequestValidationError{}

// Validate checks the field values on ReleaseSongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseSongsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseSongsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseSongsResponseMultiError, or nil if none found.
func (m *ReleaseSongsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseSongsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReleaseSongsResponseMultiError(errors)
	}

	return nil
}

// ReleaseSongsResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseSongsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseSongsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseSongsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseSongsResponseMultiError) AllErrors() []error { return m }

// ReleaseSongsResponseValidationError is the validation error returned by
// ReleaseSongsResponse.Validate if the designated constraints aren't met.
type ReleaseSongsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseSongsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseSongsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseSongsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseSongsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseSongsResponseValidationError) ErrorName() string {
	return "ReleaseSongsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseSongsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseSongsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseSongsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseSongsResponseValidationError{}
