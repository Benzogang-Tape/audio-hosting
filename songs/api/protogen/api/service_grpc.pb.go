// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SongsService_Health_FullMethodName             = "/api.SongsService/Health"
	SongsService_UploadRawSong_FullMethodName      = "/api.SongsService/UploadRawSong"
	SongsService_GetRawSong_FullMethodName         = "/api.SongsService/GetRawSong"
	SongsService_UploadRawSongImage_FullMethodName = "/api.SongsService/UploadRawSongImage"
	SongsService_GetRawSongImage_FullMethodName    = "/api.SongsService/GetRawSongImage"
	SongsService_CreateSong_FullMethodName         = "/api.SongsService/CreateSong"
	SongsService_GetSong_FullMethodName            = "/api.SongsService/GetSong"
	SongsService_UpdateSong_FullMethodName         = "/api.SongsService/UpdateSong"
	SongsService_DeleteSongs_FullMethodName        = "/api.SongsService/DeleteSongs"
	SongsService_GetSongs_FullMethodName           = "/api.SongsService/GetSongs"
	SongsService_GetMySongs_FullMethodName         = "/api.SongsService/GetMySongs"
	SongsService_ReleaseSongs_FullMethodName       = "/api.SongsService/ReleaseSongs"
)

// SongsServiceClient is the client API for SongsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongsServiceClient interface {
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// Health probe for kubernetes.
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Uploads raw song data for a song.
	//
	// This RPC is not working yet, because there is no need
	// for other services to load song data.
	// For artists only.
	UploadRawSong(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRawSongRequest, UploadRawSongResponse], error)
	// Retrieves raw song data.
	// It mostly will be used by an HTTP client to play the song.
	//
	// This RPC is not working yet, because there is no need
	// to get song data from other services.
	GetRawSong(ctx context.Context, in *GetRawSongRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRawSongResponse], error)
	// Uploads raw image data for a song.
	//
	// This RPC is not working yet, because there is no need
	// for other services to load image data.
	// For artists only.
	UploadRawSongImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRawSongImageRequest, UploadRawSongImageResponse], error)
	// Retrieves raw image data.
	// It mostly will be used by an HTTP client to show song's cover.
	//
	// This RPC is not working yet, because there is no need
	// to get image data from other services.
	GetRawSongImage(ctx context.Context, in *GetRawSongImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRawSongImageResponse], error)
	// Creates a new song.
	// Binary data should be uploaded separately using UploadRawSong and UploadRawSongImage.
	// For artists only.
	CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error)
	// Retrieves a song by ID.
	GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error)
	// Updates an existing song.
	// For artists only.
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
	// Deletes songs with its image and binary data.
	// For artists only.
	DeleteSongs(ctx context.Context, in *DeleteSongsRequest, opts ...grpc.CallOption) (*DeleteSongsResponse, error)
	// Retrieves released songs, optionally filtered and paginated.
	GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error)
	// Retrieves your uploaded songs.
	// For artists only.
	GetMySongs(ctx context.Context, in *GetMySongsRequest, opts ...grpc.CallOption) (*GetMySongsResponse, error)
	// Releases songs and notifies the followers if needed.
	// Idempotent.
	// For artists only.
	ReleaseSongs(ctx context.Context, in *ReleaseSongsRequest, opts ...grpc.CallOption) (*ReleaseSongsResponse, error)
}

type songsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongsServiceClient(cc grpc.ClientConnInterface) SongsServiceClient {
	return &songsServiceClient{cc}
}

func (c *songsServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SongsService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) UploadRawSong(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRawSongRequest, UploadRawSongResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongsService_ServiceDesc.Streams[0], SongsService_UploadRawSong_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRawSongRequest, UploadRawSongResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_UploadRawSongClient = grpc.ClientStreamingClient[UploadRawSongRequest, UploadRawSongResponse]

func (c *songsServiceClient) GetRawSong(ctx context.Context, in *GetRawSongRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRawSongResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongsService_ServiceDesc.Streams[1], SongsService_GetRawSong_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRawSongRequest, GetRawSongResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_GetRawSongClient = grpc.ServerStreamingClient[GetRawSongResponse]

func (c *songsServiceClient) UploadRawSongImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRawSongImageRequest, UploadRawSongImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongsService_ServiceDesc.Streams[2], SongsService_UploadRawSongImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRawSongImageRequest, UploadRawSongImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_UploadRawSongImageClient = grpc.ClientStreamingClient[UploadRawSongImageRequest, UploadRawSongImageResponse]

func (c *songsServiceClient) GetRawSongImage(ctx context.Context, in *GetRawSongImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRawSongImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongsService_ServiceDesc.Streams[3], SongsService_GetRawSongImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRawSongImageRequest, GetRawSongImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_GetRawSongImageClient = grpc.ServerStreamingClient[GetRawSongImageResponse]

func (c *songsServiceClient) CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSongResponse)
	err := c.cc.Invoke(ctx, SongsService_CreateSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSongResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, SongsService_UpdateSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) DeleteSongs(ctx context.Context, in *DeleteSongsRequest, opts ...grpc.CallOption) (*DeleteSongsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSongsResponse)
	err := c.cc.Invoke(ctx, SongsService_DeleteSongs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSongsResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetMySongs(ctx context.Context, in *GetMySongsRequest, opts ...grpc.CallOption) (*GetMySongsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMySongsResponse)
	err := c.cc.Invoke(ctx, SongsService_GetMySongs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) ReleaseSongs(ctx context.Context, in *ReleaseSongsRequest, opts ...grpc.CallOption) (*ReleaseSongsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseSongsResponse)
	err := c.cc.Invoke(ctx, SongsService_ReleaseSongs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SongsServiceServer is the server API for SongsService service.
// All implementations must embed UnimplementedSongsServiceServer
// for forward compatibility.
type SongsServiceServer interface {
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// Health probe for kubernetes.
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Uploads raw song data for a song.
	//
	// This RPC is not working yet, because there is no need
	// for other services to load song data.
	// For artists only.
	UploadRawSong(grpc.ClientStreamingServer[UploadRawSongRequest, UploadRawSongResponse]) error
	// Retrieves raw song data.
	// It mostly will be used by an HTTP client to play the song.
	//
	// This RPC is not working yet, because there is no need
	// to get song data from other services.
	GetRawSong(*GetRawSongRequest, grpc.ServerStreamingServer[GetRawSongResponse]) error
	// Uploads raw image data for a song.
	//
	// This RPC is not working yet, because there is no need
	// for other services to load image data.
	// For artists only.
	UploadRawSongImage(grpc.ClientStreamingServer[UploadRawSongImageRequest, UploadRawSongImageResponse]) error
	// Retrieves raw image data.
	// It mostly will be used by an HTTP client to show song's cover.
	//
	// This RPC is not working yet, because there is no need
	// to get image data from other services.
	GetRawSongImage(*GetRawSongImageRequest, grpc.ServerStreamingServer[GetRawSongImageResponse]) error
	// Creates a new song.
	// Binary data should be uploaded separately using UploadRawSong and UploadRawSongImage.
	// For artists only.
	CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error)
	// Retrieves a song by ID.
	GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error)
	// Updates an existing song.
	// For artists only.
	UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	// Deletes songs with its image and binary data.
	// For artists only.
	DeleteSongs(context.Context, *DeleteSongsRequest) (*DeleteSongsResponse, error)
	// Retrieves released songs, optionally filtered and paginated.
	GetSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error)
	// Retrieves your uploaded songs.
	// For artists only.
	GetMySongs(context.Context, *GetMySongsRequest) (*GetMySongsResponse, error)
	// Releases songs and notifies the followers if needed.
	// Idempotent.
	// For artists only.
	ReleaseSongs(context.Context, *ReleaseSongsRequest) (*ReleaseSongsResponse, error)
	mustEmbedUnimplementedSongsServiceServer()
}

// UnimplementedSongsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSongsServiceServer struct{}

func (UnimplementedSongsServiceServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSongsServiceServer) UploadRawSong(grpc.ClientStreamingServer[UploadRawSongRequest, UploadRawSongResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadRawSong not implemented")
}
func (UnimplementedSongsServiceServer) GetRawSong(*GetRawSongRequest, grpc.ServerStreamingServer[GetRawSongResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetRawSong not implemented")
}
func (UnimplementedSongsServiceServer) UploadRawSongImage(grpc.ClientStreamingServer[UploadRawSongImageRequest, UploadRawSongImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadRawSongImage not implemented")
}
func (UnimplementedSongsServiceServer) GetRawSongImage(*GetRawSongImageRequest, grpc.ServerStreamingServer[GetRawSongImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetRawSongImage not implemented")
}
func (UnimplementedSongsServiceServer) CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (UnimplementedSongsServiceServer) GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedSongsServiceServer) UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedSongsServiceServer) DeleteSongs(context.Context, *DeleteSongsRequest) (*DeleteSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSongs not implemented")
}
func (UnimplementedSongsServiceServer) GetSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongs not implemented")
}
func (UnimplementedSongsServiceServer) GetMySongs(context.Context, *GetMySongsRequest) (*GetMySongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySongs not implemented")
}
func (UnimplementedSongsServiceServer) ReleaseSongs(context.Context, *ReleaseSongsRequest) (*ReleaseSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSongs not implemented")
}
func (UnimplementedSongsServiceServer) mustEmbedUnimplementedSongsServiceServer() {}
func (UnimplementedSongsServiceServer) testEmbeddedByValue()                      {}

// UnsafeSongsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongsServiceServer will
// result in compilation errors.
type UnsafeSongsServiceServer interface {
	mustEmbedUnimplementedSongsServiceServer()
}

func RegisterSongsServiceServer(s grpc.ServiceRegistrar, srv SongsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSongsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SongsService_ServiceDesc, srv)
}

func _SongsService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_UploadRawSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongsServiceServer).UploadRawSong(&grpc.GenericServerStream[UploadRawSongRequest, UploadRawSongResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_UploadRawSongServer = grpc.ClientStreamingServer[UploadRawSongRequest, UploadRawSongResponse]

func _SongsService_GetRawSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRawSongRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongsServiceServer).GetRawSong(m, &grpc.GenericServerStream[GetRawSongRequest, GetRawSongResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_GetRawSongServer = grpc.ServerStreamingServer[GetRawSongResponse]

func _SongsService_UploadRawSongImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SongsServiceServer).UploadRawSongImage(&grpc.GenericServerStream[UploadRawSongImageRequest, UploadRawSongImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_UploadRawSongImageServer = grpc.ClientStreamingServer[UploadRawSongImageRequest, UploadRawSongImageResponse]

func _SongsService_GetRawSongImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRawSongImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongsServiceServer).GetRawSongImage(m, &grpc.GenericServerStream[GetRawSongImageRequest, GetRawSongImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongsService_GetRawSongImageServer = grpc.ServerStreamingServer[GetRawSongImageResponse]

func _SongsService_CreateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).CreateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_CreateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).CreateSong(ctx, req.(*CreateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSong(ctx, req.(*GetSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_UpdateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_DeleteSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).DeleteSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_DeleteSongs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).DeleteSongs(ctx, req.(*DeleteSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongs(ctx, req.(*GetSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetMySongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetMySongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetMySongs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetMySongs(ctx, req.(*GetMySongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_ReleaseSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).ReleaseSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_ReleaseSongs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).ReleaseSongs(ctx, req.(*ReleaseSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SongsService_ServiceDesc is the grpc.ServiceDesc for SongsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SongsService",
	HandlerType: (*SongsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _SongsService_Health_Handler,
		},
		{
			MethodName: "CreateSong",
			Handler:    _SongsService_CreateSong_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _SongsService_GetSong_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _SongsService_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSongs",
			Handler:    _SongsService_DeleteSongs_Handler,
		},
		{
			MethodName: "GetSongs",
			Handler:    _SongsService_GetSongs_Handler,
		},
		{
			MethodName: "GetMySongs",
			Handler:    _SongsService_GetMySongs_Handler,
		},
		{
			MethodName: "ReleaseSongs",
			Handler:    _SongsService_ReleaseSongs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadRawSong",
			Handler:       _SongsService_UploadRawSong_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRawSong",
			Handler:       _SongsService_GetRawSong_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadRawSongImage",
			Handler:       _SongsService_UploadRawSongImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRawSongImage",
			Handler:       _SongsService_GetRawSongImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/service.proto",
}
