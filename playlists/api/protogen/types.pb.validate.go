// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/types.proto

package protogen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _types_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PlaylistMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlaylistMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaylistMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaylistMetadataMultiError, or nil if none found.
func (m *PlaylistMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaylistMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for AuthorId

	// no validation rules for CoverUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaylistMetadataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaylistMetadataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaylistMetadataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsAlbum

	// no validation rules for IsMyCollection

	// no validation rules for IsPublic

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaylistMetadataValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaylistMetadataValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaylistMetadataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ReleasedAt != nil {

		if all {
			switch v := interface{}(m.GetReleasedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaylistMetadataValidationError{
						field:  "ReleasedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaylistMetadataValidationError{
						field:  "ReleasedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReleasedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaylistMetadataValidationError{
					field:  "ReleasedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaylistMetadataMultiError(errors)
	}

	return nil
}

// PlaylistMetadataMultiError is an error wrapping multiple validation errors
// returned by PlaylistMetadata.ValidateAll() if the designated constraints
// aren't met.
type PlaylistMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaylistMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaylistMetadataMultiError) AllErrors() []error { return m }

// PlaylistMetadataValidationError is the validation error returned by
// PlaylistMetadata.Validate if the designated constraints aren't met.
type PlaylistMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaylistMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaylistMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaylistMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaylistMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaylistMetadataValidationError) ErrorName() string { return "PlaylistMetadataValidationError" }

// Error satisfies the builtin error interface
func (e PlaylistMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaylistMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaylistMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaylistMetadataValidationError{}

// Validate checks the field values on Playlist with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Playlist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Playlist with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlaylistMultiError, or nil
// if none found.
func (m *Playlist) ValidateAll() error {
	return m.validate(true)
}

func (m *Playlist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaylistValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaylistValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaylistValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSongs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaylistValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaylistValidationError{
						field:  fmt.Sprintf("Songs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaylistValidationError{
					field:  fmt.Sprintf("Songs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaylistMultiError(errors)
	}

	return nil
}

// PlaylistMultiError is an error wrapping multiple validation errors returned
// by Playlist.ValidateAll() if the designated constraints aren't met.
type PlaylistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaylistMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaylistMultiError) AllErrors() []error { return m }

// PlaylistValidationError is the validation error returned by
// Playlist.Validate if the designated constraints aren't met.
type PlaylistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaylistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaylistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaylistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaylistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaylistValidationError) ErrorName() string { return "PlaylistValidationError" }

// Error satisfies the builtin error interface
func (e PlaylistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaylist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaylistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaylistValidationError{}

// Validate checks the field values on CreatePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaylistRequestMultiError, or nil if none found.
func (m *CreatePlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 128 {
		err := CreatePlaylistRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTrackIds() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = CreatePlaylistRequestValidationError{
				field:  fmt.Sprintf("TrackIds[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for CoverUrl

	if len(errors) > 0 {
		return CreatePlaylistRequestMultiError(errors)
	}

	return nil
}

func (m *CreatePlaylistRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreatePlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlaylistRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaylistRequestMultiError) AllErrors() []error { return m }

// CreatePlaylistRequestValidationError is the validation error returned by
// CreatePlaylistRequest.Validate if the designated constraints aren't met.
type CreatePlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaylistRequestValidationError) ErrorName() string {
	return "CreatePlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaylistRequestValidationError{}

// Validate checks the field values on CreatePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaylistResponseMultiError, or nil if none found.
func (m *CreatePlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlaylistResponseMultiError(errors)
	}

	return nil
}

// CreatePlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaylistResponseMultiError) AllErrors() []error { return m }

// CreatePlaylistResponseValidationError is the validation error returned by
// CreatePlaylistResponse.Validate if the designated constraints aren't met.
type CreatePlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaylistResponseValidationError) ErrorName() string {
	return "CreatePlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaylistResponseValidationError{}

// Validate checks the field values on GetPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlaylistRequestMultiError, or nil if none found.
func (m *GetPlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPlaylistId()); err != nil {
		err = GetPlaylistRequestValidationError{
			field:  "PlaylistId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPlaylistRequestMultiError(errors)
	}

	return nil
}

func (m *GetPlaylistRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetPlaylistRequestMultiError is an error wrapping multiple validation errors
// returned by GetPlaylistRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlaylistRequestMultiError) AllErrors() []error { return m }

// GetPlaylistRequestValidationError is the validation error returned by
// GetPlaylistRequest.Validate if the designated constraints aren't met.
type GetPlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlaylistRequestValidationError) ErrorName() string {
	return "GetPlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlaylistRequestValidationError{}

// Validate checks the field values on GetPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlaylistResponseMultiError, or nil if none found.
func (m *GetPlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPlaylistResponseMultiError(errors)
	}

	return nil
}

// GetPlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by GetPlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlaylistResponseMultiError) AllErrors() []error { return m }

// GetPlaylistResponseValidationError is the validation error returned by
// GetPlaylistResponse.Validate if the designated constraints aren't met.
type GetPlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlaylistResponseValidationError) ErrorName() string {
	return "GetPlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlaylistResponseValidationError{}

// Validate checks the field values on UpdatePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePlaylistRequestMultiError, or nil if none found.
func (m *UpdatePlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPlaylistId()); err != nil {
		err = UpdatePlaylistRequestValidationError{
			field:  "PlaylistId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTrackIds() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = UpdatePlaylistRequestValidationError{
				field:  fmt.Sprintf("TrackIds[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 128 {
			err := UpdatePlaylistRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CoverUrl != nil {
		// no validation rules for CoverUrl
	}

	if m.IsPublic != nil {
		// no validation rules for IsPublic
	}

	if len(errors) > 0 {
		return UpdatePlaylistRequestMultiError(errors)
	}

	return nil
}

func (m *UpdatePlaylistRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdatePlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePlaylistRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePlaylistRequestMultiError) AllErrors() []error { return m }

// UpdatePlaylistRequestValidationError is the validation error returned by
// UpdatePlaylistRequest.Validate if the designated constraints aren't met.
type UpdatePlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlaylistRequestValidationError) ErrorName() string {
	return "UpdatePlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlaylistRequestValidationError{}

// Validate checks the field values on UpdatePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePlaylistResponseMultiError, or nil if none found.
func (m *UpdatePlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePlaylistResponseMultiError(errors)
	}

	return nil
}

// UpdatePlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePlaylistResponseMultiError) AllErrors() []error { return m }

// UpdatePlaylistResponseValidationError is the validation error returned by
// UpdatePlaylistResponse.Validate if the designated constraints aren't met.
type UpdatePlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlaylistResponseValidationError) ErrorName() string {
	return "UpdatePlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlaylistResponseValidationError{}

// Validate checks the field values on DeletePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePlaylistRequestMultiError, or nil if none found.
func (m *DeletePlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlaylistId() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = DeletePlaylistRequestValidationError{
				field:  fmt.Sprintf("PlaylistId[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeletePlaylistRequestMultiError(errors)
	}

	return nil
}

func (m *DeletePlaylistRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeletePlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePlaylistRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePlaylistRequestMultiError) AllErrors() []error { return m }

// DeletePlaylistRequestValidationError is the validation error returned by
// DeletePlaylistRequest.Validate if the designated constraints aren't met.
type DeletePlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePlaylistRequestValidationError) ErrorName() string {
	return "DeletePlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePlaylistRequestValidationError{}

// Validate checks the field values on DeletePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePlaylistResponseMultiError, or nil if none found.
func (m *DeletePlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePlaylistResponseMultiError(errors)
	}

	return nil
}

// DeletePlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePlaylistResponseMultiError) AllErrors() []error { return m }

// DeletePlaylistResponseValidationError is the validation error returned by
// DeletePlaylistResponse.Validate if the designated constraints aren't met.
type DeletePlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePlaylistResponseValidationError) ErrorName() string {
	return "DeletePlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePlaylistResponseValidationError{}

// Validate checks the field values on PaginationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationRequestMultiError, or nil if none found.
func (m *PaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := PaginationRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 1 || val > 1000 {
		err := PaginationRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaginationRequestMultiError(errors)
	}

	return nil
}

// PaginationRequestMultiError is an error wrapping multiple validation errors
// returned by PaginationRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationRequestMultiError) AllErrors() []error { return m }

// PaginationRequestValidationError is the validation error returned by
// PaginationRequest.Validate if the designated constraints aren't met.
type PaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationRequestValidationError) ErrorName() string {
	return "PaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationRequestValidationError{}

// Validate checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationResponseMultiError, or nil if none found.
func (m *PaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for HasNext

	// no validation rules for LastPage

	if len(errors) > 0 {
		return PaginationResponseMultiError(errors)
	}

	return nil
}

// PaginationResponseMultiError is an error wrapping multiple validation errors
// returned by PaginationResponse.ValidateAll() if the designated constraints
// aren't met.
type PaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationResponseMultiError) AllErrors() []error { return m }

// PaginationResponseValidationError is the validation error returned by
// PaginationResponse.Validate if the designated constraints aren't met.
type PaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationResponseValidationError) ErrorName() string {
	return "PaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationResponseValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ArtistId != nil {

		if m.GetArtistId() != "" {

			if err := m._validateUuid(m.GetArtistId()); err != nil {
				err = FilterValidationError{
					field:  "ArtistId",
					reason: "value must be a valid UUID",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.MatchTitle != nil {

		if m.GetMatchTitle() != "" {

			if l := utf8.RuneCountInString(m.GetMatchTitle()); l < 1 || l > 64 {
				err := FilterValidationError{
					field:  "MatchTitle",
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

func (m *Filter) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on Sort with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sort with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SortMultiError, or nil if none found.
func (m *Sort) ValidateAll() error {
	return m.validate(true)
}

func (m *Sort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Order

	if len(errors) > 0 {
		return SortMultiError(errors)
	}

	return nil
}

// SortMultiError is an error wrapping multiple validation errors returned by
// Sort.ValidateAll() if the designated constraints aren't met.
type SortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortMultiError) AllErrors() []error { return m }

// SortValidationError is the validation error returned by Sort.Validate if the
// designated constraints aren't met.
type SortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortValidationError) ErrorName() string { return "SortValidationError" }

// Error satisfies the builtin error interface
func (e SortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortValidationError{}

// Validate checks the field values on GetPlaylistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlaylistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlaylistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlaylistsRequestMultiError, or nil if none found.
func (m *GetPlaylistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlaylistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlaylistsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlaylistsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlaylistsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlaylistsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlaylistsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlaylistsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetIds()) > 0 {

		if len(m.GetIds()) > 2000 {
			err := GetPlaylistsRequestValidationError{
				field:  "Ids",
				reason: "value must contain no more than 2000 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		for idx, item := range m.GetIds() {
			_, _ = idx, item

			if err := m._validateUuid(item); err != nil {
				err = GetPlaylistsRequestValidationError{
					field:  fmt.Sprintf("Ids[%v]", idx),
					reason: "value must be a valid UUID",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return GetPlaylistsRequestMultiError(errors)
	}

	return nil
}

func (m *GetPlaylistsRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetPlaylistsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPlaylistsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPlaylistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlaylistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlaylistsRequestMultiError) AllErrors() []error { return m }

// GetPlaylistsRequestValidationError is the validation error returned by
// GetPlaylistsRequest.Validate if the designated constraints aren't met.
type GetPlaylistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlaylistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlaylistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlaylistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlaylistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlaylistsRequestValidationError) ErrorName() string {
	return "GetPlaylistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlaylistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlaylistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlaylistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlaylistsRequestValidationError{}

// Validate checks the field values on GetPlaylistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlaylistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlaylistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlaylistsResponseMultiError, or nil if none found.
func (m *GetPlaylistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlaylistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlaylists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlaylistsResponseValidationError{
						field:  fmt.Sprintf("Playlists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlaylistsResponseValidationError{
						field:  fmt.Sprintf("Playlists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlaylistsResponseValidationError{
					field:  fmt.Sprintf("Playlists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlaylistsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlaylistsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlaylistsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPlaylistsResponseMultiError(errors)
	}

	return nil
}

// GetPlaylistsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPlaylistsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPlaylistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlaylistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlaylistsResponseMultiError) AllErrors() []error { return m }

// GetPlaylistsResponseValidationError is the validation error returned by
// GetPlaylistsResponse.Validate if the designated constraints aren't met.
type GetPlaylistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlaylistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlaylistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlaylistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlaylistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlaylistsResponseValidationError) ErrorName() string {
	return "GetPlaylistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlaylistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlaylistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlaylistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlaylistsResponseValidationError{}

// Validate checks the field values on CopyPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyPlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyPlaylistRequestMultiError, or nil if none found.
func (m *CopyPlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyPlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPlaylistId()); err != nil {
		err = CopyPlaylistRequestValidationError{
			field:  "PlaylistId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CopyPlaylistRequestMultiError(errors)
	}

	return nil
}

func (m *CopyPlaylistRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CopyPlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by CopyPlaylistRequest.ValidateAll() if the designated
// constraints aren't met.
type CopyPlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyPlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyPlaylistRequestMultiError) AllErrors() []error { return m }

// CopyPlaylistRequestValidationError is the validation error returned by
// CopyPlaylistRequest.Validate if the designated constraints aren't met.
type CopyPlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyPlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyPlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyPlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyPlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyPlaylistRequestValidationError) ErrorName() string {
	return "CopyPlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CopyPlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyPlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyPlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyPlaylistRequestValidationError{}

// Validate checks the field values on CopyPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyPlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyPlaylistResponseMultiError, or nil if none found.
func (m *CopyPlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyPlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaylistId

	if len(errors) > 0 {
		return CopyPlaylistResponseMultiError(errors)
	}

	return nil
}

// CopyPlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by CopyPlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type CopyPlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyPlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyPlaylistResponseMultiError) AllErrors() []error { return m }

// CopyPlaylistResponseValidationError is the validation error returned by
// CopyPlaylistResponse.Validate if the designated constraints aren't met.
type CopyPlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyPlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyPlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyPlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyPlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyPlaylistResponseValidationError) ErrorName() string {
	return "CopyPlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CopyPlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyPlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyPlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyPlaylistResponseValidationError{}

// Validate checks the field values on GetMyPlaylistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyPlaylistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyPlaylistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyPlaylistsRequestMultiError, or nil if none found.
func (m *GetMyPlaylistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyPlaylistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMyPlaylistsRequestMultiError(errors)
	}

	return nil
}

// GetMyPlaylistsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyPlaylistsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyPlaylistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyPlaylistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyPlaylistsRequestMultiError) AllErrors() []error { return m }

// GetMyPlaylistsRequestValidationError is the validation error returned by
// GetMyPlaylistsRequest.Validate if the designated constraints aren't met.
type GetMyPlaylistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPlaylistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPlaylistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPlaylistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPlaylistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPlaylistsRequestValidationError) ErrorName() string {
	return "GetMyPlaylistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPlaylistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPlaylistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPlaylistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPlaylistsRequestValidationError{}

// Validate checks the field values on GetMyPlaylistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyPlaylistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyPlaylistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyPlaylistsResponseMultiError, or nil if none found.
func (m *GetMyPlaylistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyPlaylistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlaylists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyPlaylistsResponseValidationError{
						field:  fmt.Sprintf("Playlists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyPlaylistsResponseValidationError{
						field:  fmt.Sprintf("Playlists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyPlaylistsResponseValidationError{
					field:  fmt.Sprintf("Playlists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyPlaylistsResponseMultiError(errors)
	}

	return nil
}

// GetMyPlaylistsResponseMultiError is an error wrapping multiple validation
// errors returned by GetMyPlaylistsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMyPlaylistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyPlaylistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyPlaylistsResponseMultiError) AllErrors() []error { return m }

// GetMyPlaylistsResponseValidationError is the validation error returned by
// GetMyPlaylistsResponse.Validate if the designated constraints aren't met.
type GetMyPlaylistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPlaylistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPlaylistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPlaylistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPlaylistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPlaylistsResponseValidationError) ErrorName() string {
	return "GetMyPlaylistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPlaylistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPlaylistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPlaylistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPlaylistsResponseValidationError{}

// Validate checks the field values on GetMyCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyCollectionRequestMultiError, or nil if none found.
func (m *GetMyCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMyCollectionRequestMultiError(errors)
	}

	return nil
}

// GetMyCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyCollectionRequestMultiError) AllErrors() []error { return m }

// GetMyCollectionRequestValidationError is the validation error returned by
// GetMyCollectionRequest.Validate if the designated constraints aren't met.
type GetMyCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyCollectionRequestValidationError) ErrorName() string {
	return "GetMyCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyCollectionRequestValidationError{}

// Validate checks the field values on GetMyCollectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyCollectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyCollectionResponseMultiError, or nil if none found.
func (m *GetMyCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyCollectionResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyCollectionResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyCollectionResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyCollectionResponseMultiError(errors)
	}

	return nil
}

// GetMyCollectionResponseMultiError is an error wrapping multiple validation
// errors returned by GetMyCollectionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMyCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyCollectionResponseMultiError) AllErrors() []error { return m }

// GetMyCollectionResponseValidationError is the validation error returned by
// GetMyCollectionResponse.Validate if the designated constraints aren't met.
type GetMyCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyCollectionResponseValidationError) ErrorName() string {
	return "GetMyCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyCollectionResponseValidationError{}

// Validate checks the field values on LikeDislikePlaylistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeDislikePlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeDislikePlaylistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeDislikePlaylistRequestMultiError, or nil if none found.
func (m *LikeDislikePlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeDislikePlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPlaylistId()); err != nil {
		err = LikeDislikePlaylistRequestValidationError{
			field:  "PlaylistId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LikeDislikePlaylistRequestMultiError(errors)
	}

	return nil
}

func (m *LikeDislikePlaylistRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LikeDislikePlaylistRequestMultiError is an error wrapping multiple
// validation errors returned by LikeDislikePlaylistRequest.ValidateAll() if
// the designated constraints aren't met.
type LikeDislikePlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeDislikePlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeDislikePlaylistRequestMultiError) AllErrors() []error { return m }

// LikeDislikePlaylistRequestValidationError is the validation error returned
// by LikeDislikePlaylistRequest.Validate if the designated constraints aren't met.
type LikeDislikePlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeDislikePlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeDislikePlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeDislikePlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeDislikePlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeDislikePlaylistRequestValidationError) ErrorName() string {
	return "LikeDislikePlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeDislikePlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeDislikePlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeDislikePlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeDislikePlaylistRequestValidationError{}

// Validate checks the field values on LikeDislikePlaylistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeDislikePlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeDislikePlaylistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeDislikePlaylistResponseMultiError, or nil if none found.
func (m *LikeDislikePlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeDislikePlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LikeDislikePlaylistResponseMultiError(errors)
	}

	return nil
}

// LikeDislikePlaylistResponseMultiError is an error wrapping multiple
// validation errors returned by LikeDislikePlaylistResponse.ValidateAll() if
// the designated constraints aren't met.
type LikeDislikePlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeDislikePlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeDislikePlaylistResponseMultiError) AllErrors() []error { return m }

// LikeDislikePlaylistResponseValidationError is the validation error returned
// by LikeDislikePlaylistResponse.Validate if the designated constraints
// aren't met.
type LikeDislikePlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeDislikePlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeDislikePlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeDislikePlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeDislikePlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeDislikePlaylistResponseValidationError) ErrorName() string {
	return "LikeDislikePlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LikeDislikePlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeDislikePlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeDislikePlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeDislikePlaylistResponseValidationError{}

// Validate checks the field values on LikeDislikeTrackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeDislikeTrackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeDislikeTrackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeDislikeTrackRequestMultiError, or nil if none found.
func (m *LikeDislikeTrackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeDislikeTrackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetTrackId()); err != nil {
		err = LikeDislikeTrackRequestValidationError{
			field:  "TrackId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LikeDislikeTrackRequestMultiError(errors)
	}

	return nil
}

func (m *LikeDislikeTrackRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LikeDislikeTrackRequestMultiError is an error wrapping multiple validation
// errors returned by LikeDislikeTrackRequest.ValidateAll() if the designated
// constraints aren't met.
type LikeDislikeTrackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeDislikeTrackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeDislikeTrackRequestMultiError) AllErrors() []error { return m }

// LikeDislikeTrackRequestValidationError is the validation error returned by
// LikeDislikeTrackRequest.Validate if the designated constraints aren't met.
type LikeDislikeTrackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeDislikeTrackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeDislikeTrackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeDislikeTrackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeDislikeTrackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeDislikeTrackRequestValidationError) ErrorName() string {
	return "LikeDislikeTrackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeDislikeTrackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeDislikeTrackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeDislikeTrackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeDislikeTrackRequestValidationError{}

// Validate checks the field values on LikeDislikeTrackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeDislikeTrackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeDislikeTrackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeDislikeTrackResponseMultiError, or nil if none found.
func (m *LikeDislikeTrackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeDislikeTrackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LikeDislikeTrackResponseMultiError(errors)
	}

	return nil
}

// LikeDislikeTrackResponseMultiError is an error wrapping multiple validation
// errors returned by LikeDislikeTrackResponse.ValidateAll() if the designated
// constraints aren't met.
type LikeDislikeTrackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeDislikeTrackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeDislikeTrackResponseMultiError) AllErrors() []error { return m }

// LikeDislikeTrackResponseValidationError is the validation error returned by
// LikeDislikeTrackResponse.Validate if the designated constraints aren't met.
type LikeDislikeTrackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeDislikeTrackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeDislikeTrackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeDislikeTrackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeDislikeTrackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeDislikeTrackResponseValidationError) ErrorName() string {
	return "LikeDislikeTrackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LikeDislikeTrackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeDislikeTrackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeDislikeTrackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeDislikeTrackResponseValidationError{}

// Validate checks the field values on GetURLPlaylistCoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetURLPlaylistCoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetURLPlaylistCoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetURLPlaylistCoverRequestMultiError, or nil if none found.
func (m *GetURLPlaylistCoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetURLPlaylistCoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPlaylistId()); err != nil {
		err = GetURLPlaylistCoverRequestValidationError{
			field:  "PlaylistId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetURLPlaylistCoverRequestMultiError(errors)
	}

	return nil
}

func (m *GetURLPlaylistCoverRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetURLPlaylistCoverRequestMultiError is an error wrapping multiple
// validation errors returned by GetURLPlaylistCoverRequest.ValidateAll() if
// the designated constraints aren't met.
type GetURLPlaylistCoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetURLPlaylistCoverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetURLPlaylistCoverRequestMultiError) AllErrors() []error { return m }

// GetURLPlaylistCoverRequestValidationError is the validation error returned
// by GetURLPlaylistCoverRequest.Validate if the designated constraints aren't met.
type GetURLPlaylistCoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetURLPlaylistCoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetURLPlaylistCoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetURLPlaylistCoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetURLPlaylistCoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetURLPlaylistCoverRequestValidationError) ErrorName() string {
	return "GetURLPlaylistCoverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetURLPlaylistCoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetURLPlaylistCoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetURLPlaylistCoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetURLPlaylistCoverRequestValidationError{}

// Validate checks the field values on GetURLPlaylistCoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetURLPlaylistCoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetURLPlaylistCoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetURLPlaylistCoverResponseMultiError, or nil if none found.
func (m *GetURLPlaylistCoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetURLPlaylistCoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoverUrl

	if len(errors) > 0 {
		return GetURLPlaylistCoverResponseMultiError(errors)
	}

	return nil
}

// GetURLPlaylistCoverResponseMultiError is an error wrapping multiple
// validation errors returned by GetURLPlaylistCoverResponse.ValidateAll() if
// the designated constraints aren't met.
type GetURLPlaylistCoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetURLPlaylistCoverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetURLPlaylistCoverResponseMultiError) AllErrors() []error { return m }

// GetURLPlaylistCoverResponseValidationError is the validation error returned
// by GetURLPlaylistCoverResponse.Validate if the designated constraints
// aren't met.
type GetURLPlaylistCoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetURLPlaylistCoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetURLPlaylistCoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetURLPlaylistCoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetURLPlaylistCoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetURLPlaylistCoverResponseValidationError) ErrorName() string {
	return "GetURLPlaylistCoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetURLPlaylistCoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetURLPlaylistCoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetURLPlaylistCoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetURLPlaylistCoverResponseValidationError{}

// Validate checks the field values on GetRawPlaylistCoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRawPlaylistCoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawPlaylistCoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRawPlaylistCoverRequestMultiError, or nil if none found.
func (m *GetRawPlaylistCoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawPlaylistCoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RawCoverId

	if len(errors) > 0 {
		return GetRawPlaylistCoverRequestMultiError(errors)
	}

	return nil
}

// GetRawPlaylistCoverRequestMultiError is an error wrapping multiple
// validation errors returned by GetRawPlaylistCoverRequest.ValidateAll() if
// the designated constraints aren't met.
type GetRawPlaylistCoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawPlaylistCoverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawPlaylistCoverRequestMultiError) AllErrors() []error { return m }

// GetRawPlaylistCoverRequestValidationError is the validation error returned
// by GetRawPlaylistCoverRequest.Validate if the designated constraints aren't met.
type GetRawPlaylistCoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawPlaylistCoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawPlaylistCoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawPlaylistCoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawPlaylistCoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawPlaylistCoverRequestValidationError) ErrorName() string {
	return "GetRawPlaylistCoverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawPlaylistCoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawPlaylistCoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawPlaylistCoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawPlaylistCoverRequestValidationError{}

// Validate checks the field values on GetRawPlaylistCoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRawPlaylistCoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRawPlaylistCoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRawPlaylistCoverResponseMultiError, or nil if none found.
func (m *GetRawPlaylistCoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRawPlaylistCoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetFilePart()); l < 1 || l > 1048576 {
		err := GetRawPlaylistCoverResponseValidationError{
			field:  "FilePart",
			reason: "value length must be between 1 and 1048576 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRawPlaylistCoverResponseMultiError(errors)
	}

	return nil
}

// GetRawPlaylistCoverResponseMultiError is an error wrapping multiple
// validation errors returned by GetRawPlaylistCoverResponse.ValidateAll() if
// the designated constraints aren't met.
type GetRawPlaylistCoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRawPlaylistCoverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRawPlaylistCoverResponseMultiError) AllErrors() []error { return m }

// GetRawPlaylistCoverResponseValidationError is the validation error returned
// by GetRawPlaylistCoverResponse.Validate if the designated constraints
// aren't met.
type GetRawPlaylistCoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRawPlaylistCoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRawPlaylistCoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRawPlaylistCoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRawPlaylistCoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRawPlaylistCoverResponseValidationError) ErrorName() string {
	return "GetRawPlaylistCoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRawPlaylistCoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRawPlaylistCoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRawPlaylistCoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRawPlaylistCoverResponseValidationError{}

// Validate checks the field values on UploadRawPlaylistCoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadRawPlaylistCoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRawPlaylistCoverRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UploadRawPlaylistCoverRequestMultiError, or nil if none found.
func (m *UploadRawPlaylistCoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRawPlaylistCoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetPlaylistId()); err != nil {
		err = UploadRawPlaylistCoverRequestValidationError{
			field:  "PlaylistId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetFilePart()); l < 1 || l > 1048576 {
		err := UploadRawPlaylistCoverRequestValidationError{
			field:  "FilePart",
			reason: "value length must be between 1 and 1048576 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extension

	if len(errors) > 0 {
		return UploadRawPlaylistCoverRequestMultiError(errors)
	}

	return nil
}

func (m *UploadRawPlaylistCoverRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UploadRawPlaylistCoverRequestMultiError is an error wrapping multiple
// validation errors returned by UploadRawPlaylistCoverRequest.ValidateAll()
// if the designated constraints aren't met.
type UploadRawPlaylistCoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRawPlaylistCoverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRawPlaylistCoverRequestMultiError) AllErrors() []error { return m }

// UploadRawPlaylistCoverRequestValidationError is the validation error
// returned by UploadRawPlaylistCoverRequest.Validate if the designated
// constraints aren't met.
type UploadRawPlaylistCoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRawPlaylistCoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRawPlaylistCoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRawPlaylistCoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRawPlaylistCoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRawPlaylistCoverRequestValidationError) ErrorName() string {
	return "UploadRawPlaylistCoverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRawPlaylistCoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRawPlaylistCoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRawPlaylistCoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRawPlaylistCoverRequestValidationError{}

// Validate checks the field values on UploadRawPlaylistCoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadRawPlaylistCoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRawPlaylistCoverResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UploadRawPlaylistCoverResponseMultiError, or nil if none found.
func (m *UploadRawPlaylistCoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRawPlaylistCoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	if len(errors) > 0 {
		return UploadRawPlaylistCoverResponseMultiError(errors)
	}

	return nil
}

// UploadRawPlaylistCoverResponseMultiError is an error wrapping multiple
// validation errors returned by UploadRawPlaylistCoverResponse.ValidateAll()
// if the designated constraints aren't met.
type UploadRawPlaylistCoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRawPlaylistCoverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRawPlaylistCoverResponseMultiError) AllErrors() []error { return m }

// UploadRawPlaylistCoverResponseValidationError is the validation error
// returned by UploadRawPlaylistCoverResponse.Validate if the designated
// constraints aren't met.
type UploadRawPlaylistCoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRawPlaylistCoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRawPlaylistCoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRawPlaylistCoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRawPlaylistCoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRawPlaylistCoverResponseValidationError) ErrorName() string {
	return "UploadRawPlaylistCoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRawPlaylistCoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRawPlaylistCoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRawPlaylistCoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRawPlaylistCoverResponseValidationError{}

// Validate checks the field values on ReleaseAlbumRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseAlbumRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseAlbumRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseAlbumRequestMultiError, or nil if none found.
func (m *ReleaseAlbumRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseAlbumRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAlbumId()); err != nil {
		err = ReleaseAlbumRequestValidationError{
			field:  "AlbumId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SuppressNotifications

	if len(errors) > 0 {
		return ReleaseAlbumRequestMultiError(errors)
	}

	return nil
}

func (m *ReleaseAlbumRequest) _validateUuid(uuid string) error {
	if matched := _types_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ReleaseAlbumRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseAlbumRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseAlbumRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseAlbumRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseAlbumRequestMultiError) AllErrors() []error { return m }

// ReleaseAlbumRequestValidationError is the validation error returned by
// ReleaseAlbumRequest.Validate if the designated constraints aren't met.
type ReleaseAlbumRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseAlbumRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseAlbumRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseAlbumRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseAlbumRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseAlbumRequestValidationError) ErrorName() string {
	return "ReleaseAlbumRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseAlbumRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseAlbumRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseAlbumRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseAlbumRequestValidationError{}

// Validate checks the field values on ReleaseAlbumResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseAlbumResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseAlbumResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseAlbumResponseMultiError, or nil if none found.
func (m *ReleaseAlbumResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseAlbumResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ReleaseAlbumResponseMultiError(errors)
	}

	return nil
}

// ReleaseAlbumResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseAlbumResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseAlbumResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseAlbumResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseAlbumResponseMultiError) AllErrors() []error { return m }

// ReleaseAlbumResponseValidationError is the validation error returned by
// ReleaseAlbumResponse.Validate if the designated constraints aren't met.
type ReleaseAlbumResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseAlbumResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseAlbumResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseAlbumResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseAlbumResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseAlbumResponseValidationError) ErrorName() string {
	return "ReleaseAlbumResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseAlbumResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseAlbumResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseAlbumResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseAlbumResponseValidationError{}
