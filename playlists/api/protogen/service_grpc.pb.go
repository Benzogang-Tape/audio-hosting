// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlaylistsService_CreatePlaylist_FullMethodName         = "/playlists_api.PlaylistsService/CreatePlaylist"
	PlaylistsService_GetPlaylist_FullMethodName            = "/playlists_api.PlaylistsService/GetPlaylist"
	PlaylistsService_UpdatePlaylist_FullMethodName         = "/playlists_api.PlaylistsService/UpdatePlaylist"
	PlaylistsService_DeletePlaylist_FullMethodName         = "/playlists_api.PlaylistsService/DeletePlaylist"
	PlaylistsService_GetPlaylists_FullMethodName           = "/playlists_api.PlaylistsService/GetPlaylists"
	PlaylistsService_GetRawPlaylistCover_FullMethodName    = "/playlists_api.PlaylistsService/GetRawPlaylistCover"
	PlaylistsService_UploadRawPlaylistCover_FullMethodName = "/playlists_api.PlaylistsService/UploadRawPlaylistCover"
	PlaylistsService_CopyPlaylist_FullMethodName           = "/playlists_api.PlaylistsService/CopyPlaylist"
	PlaylistsService_GetMyPlaylists_FullMethodName         = "/playlists_api.PlaylistsService/GetMyPlaylists"
	PlaylistsService_GetMyCollection_FullMethodName        = "/playlists_api.PlaylistsService/GetMyCollection"
	PlaylistsService_LikePlaylist_FullMethodName           = "/playlists_api.PlaylistsService/LikePlaylist"
	PlaylistsService_DislikePlaylist_FullMethodName        = "/playlists_api.PlaylistsService/DislikePlaylist"
	PlaylistsService_LikeTrack_FullMethodName              = "/playlists_api.PlaylistsService/LikeTrack"
	PlaylistsService_DislikeTrack_FullMethodName           = "/playlists_api.PlaylistsService/DislikeTrack"
	PlaylistsService_CreateAlbum_FullMethodName            = "/playlists_api.PlaylistsService/CreateAlbum"
	PlaylistsService_ReleaseAlbum_FullMethodName           = "/playlists_api.PlaylistsService/ReleaseAlbum"
)

// PlaylistsServiceClient is the client API for PlaylistsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistsServiceClient interface {
	// Actions with playlists
	CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	GetPlaylist(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*GetPlaylistResponse, error)
	UpdatePlaylist(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*UpdatePlaylistResponse, error)
	DeletePlaylist(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error)
	GetPlaylists(ctx context.Context, in *GetPlaylistsRequest, opts ...grpc.CallOption) (*GetPlaylistsResponse, error)
	// Actions with playlist's covers
	GetRawPlaylistCover(ctx context.Context, in *GetRawPlaylistCoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRawPlaylistCoverResponse], error)
	UploadRawPlaylistCover(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse], error)
	// User's actions with playlists
	CopyPlaylist(ctx context.Context, in *CopyPlaylistRequest, opts ...grpc.CallOption) (*CopyPlaylistResponse, error)
	// Get playlists that user has liked or created
	GetMyPlaylists(ctx context.Context, in *GetMyPlaylistsRequest, opts ...grpc.CallOption) (*GetMyPlaylistsResponse, error)
	// Get playlist of liked tracks
	GetMyCollection(ctx context.Context, in *GetMyCollectionRequest, opts ...grpc.CallOption) (*GetMyCollectionResponse, error)
	LikePlaylist(ctx context.Context, in *LikeDislikePlaylistRequest, opts ...grpc.CallOption) (*LikeDislikePlaylistResponse, error)
	DislikePlaylist(ctx context.Context, in *LikeDislikePlaylistRequest, opts ...grpc.CallOption) (*LikeDislikePlaylistResponse, error)
	LikeTrack(ctx context.Context, in *LikeDislikeTrackRequest, opts ...grpc.CallOption) (*LikeDislikeTrackResponse, error)
	DislikeTrack(ctx context.Context, in *LikeDislikeTrackRequest, opts ...grpc.CallOption) (*LikeDislikeTrackResponse, error)
	// Actions with albums
	CreateAlbum(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	ReleaseAlbum(ctx context.Context, in *ReleaseAlbumRequest, opts ...grpc.CallOption) (*ReleaseAlbumResponse, error)
}

type playlistsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistsServiceClient(cc grpc.ClientConnInterface) PlaylistsServiceClient {
	return &playlistsServiceClient{cc}
}

func (c *playlistsServiceClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_CreatePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) GetPlaylist(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*GetPlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_GetPlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) UpdatePlaylist(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*UpdatePlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_UpdatePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) DeletePlaylist(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_DeletePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) GetPlaylists(ctx context.Context, in *GetPlaylistsRequest, opts ...grpc.CallOption) (*GetPlaylistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaylistsResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_GetPlaylists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) GetRawPlaylistCover(ctx context.Context, in *GetRawPlaylistCoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRawPlaylistCoverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PlaylistsService_ServiceDesc.Streams[0], PlaylistsService_GetRawPlaylistCover_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRawPlaylistCoverRequest, GetRawPlaylistCoverResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PlaylistsService_GetRawPlaylistCoverClient = grpc.ServerStreamingClient[GetRawPlaylistCoverResponse]

func (c *playlistsServiceClient) UploadRawPlaylistCover(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PlaylistsService_ServiceDesc.Streams[1], PlaylistsService_UploadRawPlaylistCover_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PlaylistsService_UploadRawPlaylistCoverClient = grpc.ClientStreamingClient[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse]

func (c *playlistsServiceClient) CopyPlaylist(ctx context.Context, in *CopyPlaylistRequest, opts ...grpc.CallOption) (*CopyPlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyPlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_CopyPlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) GetMyPlaylists(ctx context.Context, in *GetMyPlaylistsRequest, opts ...grpc.CallOption) (*GetMyPlaylistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyPlaylistsResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_GetMyPlaylists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) GetMyCollection(ctx context.Context, in *GetMyCollectionRequest, opts ...grpc.CallOption) (*GetMyCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyCollectionResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_GetMyCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) LikePlaylist(ctx context.Context, in *LikeDislikePlaylistRequest, opts ...grpc.CallOption) (*LikeDislikePlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeDislikePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_LikePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) DislikePlaylist(ctx context.Context, in *LikeDislikePlaylistRequest, opts ...grpc.CallOption) (*LikeDislikePlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeDislikePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_DislikePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) LikeTrack(ctx context.Context, in *LikeDislikeTrackRequest, opts ...grpc.CallOption) (*LikeDislikeTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeDislikeTrackResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_LikeTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) DislikeTrack(ctx context.Context, in *LikeDislikeTrackRequest, opts ...grpc.CallOption) (*LikeDislikeTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeDislikeTrackResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_DislikeTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) CreateAlbum(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_CreateAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistsServiceClient) ReleaseAlbum(ctx context.Context, in *ReleaseAlbumRequest, opts ...grpc.CallOption) (*ReleaseAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseAlbumResponse)
	err := c.cc.Invoke(ctx, PlaylistsService_ReleaseAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistsServiceServer is the server API for PlaylistsService service.
// All implementations must embed UnimplementedPlaylistsServiceServer
// for forward compatibility.
type PlaylistsServiceServer interface {
	// Actions with playlists
	CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error)
	GetPlaylist(context.Context, *GetPlaylistRequest) (*GetPlaylistResponse, error)
	UpdatePlaylist(context.Context, *UpdatePlaylistRequest) (*UpdatePlaylistResponse, error)
	DeletePlaylist(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error)
	GetPlaylists(context.Context, *GetPlaylistsRequest) (*GetPlaylistsResponse, error)
	// Actions with playlist's covers
	GetRawPlaylistCover(*GetRawPlaylistCoverRequest, grpc.ServerStreamingServer[GetRawPlaylistCoverResponse]) error
	UploadRawPlaylistCover(grpc.ClientStreamingServer[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse]) error
	// User's actions with playlists
	CopyPlaylist(context.Context, *CopyPlaylistRequest) (*CopyPlaylistResponse, error)
	// Get playlists that user has liked or created
	GetMyPlaylists(context.Context, *GetMyPlaylistsRequest) (*GetMyPlaylistsResponse, error)
	// Get playlist of liked tracks
	GetMyCollection(context.Context, *GetMyCollectionRequest) (*GetMyCollectionResponse, error)
	LikePlaylist(context.Context, *LikeDislikePlaylistRequest) (*LikeDislikePlaylistResponse, error)
	DislikePlaylist(context.Context, *LikeDislikePlaylistRequest) (*LikeDislikePlaylistResponse, error)
	LikeTrack(context.Context, *LikeDislikeTrackRequest) (*LikeDislikeTrackResponse, error)
	DislikeTrack(context.Context, *LikeDislikeTrackRequest) (*LikeDislikeTrackResponse, error)
	// Actions with albums
	CreateAlbum(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error)
	ReleaseAlbum(context.Context, *ReleaseAlbumRequest) (*ReleaseAlbumResponse, error)
	mustEmbedUnimplementedPlaylistsServiceServer()
}

// UnimplementedPlaylistsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlaylistsServiceServer struct{}

func (UnimplementedPlaylistsServiceServer) CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedPlaylistsServiceServer) GetPlaylist(context.Context, *GetPlaylistRequest) (*GetPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylist not implemented")
}
func (UnimplementedPlaylistsServiceServer) UpdatePlaylist(context.Context, *UpdatePlaylistRequest) (*UpdatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylist not implemented")
}
func (UnimplementedPlaylistsServiceServer) DeletePlaylist(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaylist not implemented")
}
func (UnimplementedPlaylistsServiceServer) GetPlaylists(context.Context, *GetPlaylistsRequest) (*GetPlaylistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylists not implemented")
}
func (UnimplementedPlaylistsServiceServer) GetRawPlaylistCover(*GetRawPlaylistCoverRequest, grpc.ServerStreamingServer[GetRawPlaylistCoverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetRawPlaylistCover not implemented")
}
func (UnimplementedPlaylistsServiceServer) UploadRawPlaylistCover(grpc.ClientStreamingServer[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadRawPlaylistCover not implemented")
}
func (UnimplementedPlaylistsServiceServer) CopyPlaylist(context.Context, *CopyPlaylistRequest) (*CopyPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyPlaylist not implemented")
}
func (UnimplementedPlaylistsServiceServer) GetMyPlaylists(context.Context, *GetMyPlaylistsRequest) (*GetMyPlaylistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPlaylists not implemented")
}
func (UnimplementedPlaylistsServiceServer) GetMyCollection(context.Context, *GetMyCollectionRequest) (*GetMyCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyCollection not implemented")
}
func (UnimplementedPlaylistsServiceServer) LikePlaylist(context.Context, *LikeDislikePlaylistRequest) (*LikeDislikePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePlaylist not implemented")
}
func (UnimplementedPlaylistsServiceServer) DislikePlaylist(context.Context, *LikeDislikePlaylistRequest) (*LikeDislikePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikePlaylist not implemented")
}
func (UnimplementedPlaylistsServiceServer) LikeTrack(context.Context, *LikeDislikeTrackRequest) (*LikeDislikeTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTrack not implemented")
}
func (UnimplementedPlaylistsServiceServer) DislikeTrack(context.Context, *LikeDislikeTrackRequest) (*LikeDislikeTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeTrack not implemented")
}
func (UnimplementedPlaylistsServiceServer) CreateAlbum(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedPlaylistsServiceServer) ReleaseAlbum(context.Context, *ReleaseAlbumRequest) (*ReleaseAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAlbum not implemented")
}
func (UnimplementedPlaylistsServiceServer) mustEmbedUnimplementedPlaylistsServiceServer() {}
func (UnimplementedPlaylistsServiceServer) testEmbeddedByValue()                          {}

// UnsafePlaylistsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistsServiceServer will
// result in compilation errors.
type UnsafePlaylistsServiceServer interface {
	mustEmbedUnimplementedPlaylistsServiceServer()
}

func RegisterPlaylistsServiceServer(s grpc.ServiceRegistrar, srv PlaylistsServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlaylistsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlaylistsService_ServiceDesc, srv)
}

func _PlaylistsService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_CreatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).CreatePlaylist(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_GetPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).GetPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_GetPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).GetPlaylist(ctx, req.(*GetPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_UpdatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).UpdatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_UpdatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).UpdatePlaylist(ctx, req.(*UpdatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_DeletePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).DeletePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_DeletePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).DeletePlaylist(ctx, req.(*DeletePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_GetPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).GetPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_GetPlaylists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).GetPlaylists(ctx, req.(*GetPlaylistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_GetRawPlaylistCover_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRawPlaylistCoverRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaylistsServiceServer).GetRawPlaylistCover(m, &grpc.GenericServerStream[GetRawPlaylistCoverRequest, GetRawPlaylistCoverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PlaylistsService_GetRawPlaylistCoverServer = grpc.ServerStreamingServer[GetRawPlaylistCoverResponse]

func _PlaylistsService_UploadRawPlaylistCover_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaylistsServiceServer).UploadRawPlaylistCover(&grpc.GenericServerStream[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PlaylistsService_UploadRawPlaylistCoverServer = grpc.ClientStreamingServer[UploadRawPlaylistCoverRequest, UploadRawPlaylistCoverResponse]

func _PlaylistsService_CopyPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).CopyPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_CopyPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).CopyPlaylist(ctx, req.(*CopyPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_GetMyPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyPlaylistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).GetMyPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_GetMyPlaylists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).GetMyPlaylists(ctx, req.(*GetMyPlaylistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_GetMyCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).GetMyCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_GetMyCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).GetMyCollection(ctx, req.(*GetMyCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_LikePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeDislikePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).LikePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_LikePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).LikePlaylist(ctx, req.(*LikeDislikePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_DislikePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeDislikePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).DislikePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_DislikePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).DislikePlaylist(ctx, req.(*LikeDislikePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_LikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeDislikeTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).LikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_LikeTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).LikeTrack(ctx, req.(*LikeDislikeTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_DislikeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeDislikeTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).DislikeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_DislikeTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).DislikeTrack(ctx, req.(*LikeDislikeTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_CreateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).CreateAlbum(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistsService_ReleaseAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistsServiceServer).ReleaseAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistsService_ReleaseAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistsServiceServer).ReleaseAlbum(ctx, req.(*ReleaseAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistsService_ServiceDesc is the grpc.ServiceDesc for PlaylistsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playlists_api.PlaylistsService",
	HandlerType: (*PlaylistsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _PlaylistsService_CreatePlaylist_Handler,
		},
		{
			MethodName: "GetPlaylist",
			Handler:    _PlaylistsService_GetPlaylist_Handler,
		},
		{
			MethodName: "UpdatePlaylist",
			Handler:    _PlaylistsService_UpdatePlaylist_Handler,
		},
		{
			MethodName: "DeletePlaylist",
			Handler:    _PlaylistsService_DeletePlaylist_Handler,
		},
		{
			MethodName: "GetPlaylists",
			Handler:    _PlaylistsService_GetPlaylists_Handler,
		},
		{
			MethodName: "CopyPlaylist",
			Handler:    _PlaylistsService_CopyPlaylist_Handler,
		},
		{
			MethodName: "GetMyPlaylists",
			Handler:    _PlaylistsService_GetMyPlaylists_Handler,
		},
		{
			MethodName: "GetMyCollection",
			Handler:    _PlaylistsService_GetMyCollection_Handler,
		},
		{
			MethodName: "LikePlaylist",
			Handler:    _PlaylistsService_LikePlaylist_Handler,
		},
		{
			MethodName: "DislikePlaylist",
			Handler:    _PlaylistsService_DislikePlaylist_Handler,
		},
		{
			MethodName: "LikeTrack",
			Handler:    _PlaylistsService_LikeTrack_Handler,
		},
		{
			MethodName: "DislikeTrack",
			Handler:    _PlaylistsService_DislikeTrack_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _PlaylistsService_CreateAlbum_Handler,
		},
		{
			MethodName: "ReleaseAlbum",
			Handler:    _PlaylistsService_ReleaseAlbum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRawPlaylistCover",
			Handler:       _PlaylistsService_GetRawPlaylistCover_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadRawPlaylistCover",
			Handler:       _PlaylistsService_UploadRawPlaylistCover_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/service.proto",
}
