// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: api/types.proto

package protogen

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protogen "github.com/Benzogang-Tape/audio-hosting/playlists/api/protogen/clients/songs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageFileExtension int32

const (
	ImageFileExtension_JPEG ImageFileExtension = 0
	ImageFileExtension_PNG  ImageFileExtension = 1
	ImageFileExtension_GIF  ImageFileExtension = 2
)

// Enum value maps for ImageFileExtension.
var (
	ImageFileExtension_name = map[int32]string{
		0: "JPEG",
		1: "PNG",
		2: "GIF",
	}
	ImageFileExtension_value = map[string]int32{
		"JPEG": 0,
		"PNG":  1,
		"GIF":  2,
	}
)

func (x ImageFileExtension) Enum() *ImageFileExtension {
	p := new(ImageFileExtension)
	*p = x
	return p
}

func (x ImageFileExtension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFileExtension) Descriptor() protoreflect.EnumDescriptor {
	return file_api_types_proto_enumTypes[0].Descriptor()
}

func (ImageFileExtension) Type() protoreflect.EnumType {
	return &file_api_types_proto_enumTypes[0]
}

func (x ImageFileExtension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageFileExtension.Descriptor instead.
func (ImageFileExtension) EnumDescriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{0}
}

type PlaylistMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	AuthorId       string                 `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	CoverUrl       string                 `protobuf:"bytes,5,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ReleasedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=released_at,json=releasedAt,proto3,oneof" json:"released_at,omitempty"`
	IsAlbum        bool                   `protobuf:"varint,9,opt,name=is_album,json=isAlbum,proto3" json:"is_album,omitempty"`
	IsMyCollection bool                   `protobuf:"varint,10,opt,name=is_my_collection,json=isMyCollection,proto3" json:"is_my_collection,omitempty"`
	IsPublic       bool                   `protobuf:"varint,11,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *PlaylistMetadata) Reset() {
	*x = PlaylistMetadata{}
	mi := &file_api_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaylistMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistMetadata) ProtoMessage() {}

func (x *PlaylistMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistMetadata.ProtoReflect.Descriptor instead.
func (*PlaylistMetadata) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{0}
}

func (x *PlaylistMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlaylistMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlaylistMetadata) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *PlaylistMetadata) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *PlaylistMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PlaylistMetadata) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PlaylistMetadata) GetReleasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedAt
	}
	return nil
}

func (x *PlaylistMetadata) GetIsAlbum() bool {
	if x != nil {
		return x.IsAlbum
	}
	return false
}

func (x *PlaylistMetadata) GetIsMyCollection() bool {
	if x != nil {
		return x.IsMyCollection
	}
	return false
}

func (x *PlaylistMetadata) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type Playlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *PlaylistMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Songs    []*protogen.Song  `protobuf:"bytes,2,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *Playlist) Reset() {
	*x = Playlist{}
	mi := &file_api_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Playlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist) ProtoMessage() {}

func (x *Playlist) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist.ProtoReflect.Descriptor instead.
func (*Playlist) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{1}
}

func (x *Playlist) GetMetadata() *PlaylistMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Playlist) GetSongs() []*protogen.Song {
	if x != nil {
		return x.Songs
	}
	return nil
}

type CreatePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TrackIds []string `protobuf:"bytes,2,rep,name=track_ids,json=trackIds,proto3" json:"track_ids,omitempty"`
	CoverUrl string   `protobuf:"bytes,3,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
}

func (x *CreatePlaylistRequest) Reset() {
	*x = CreatePlaylistRequest{}
	mi := &file_api_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlaylistRequest) ProtoMessage() {}

func (x *CreatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*CreatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePlaylistRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePlaylistRequest) GetTrackIds() []string {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

func (x *CreatePlaylistRequest) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

type CreatePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist *Playlist `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (x *CreatePlaylistResponse) Reset() {
	*x = CreatePlaylistResponse{}
	mi := &file_api_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlaylistResponse) ProtoMessage() {}

func (x *CreatePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlaylistResponse.ProtoReflect.Descriptor instead.
func (*CreatePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePlaylistResponse) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

type GetPlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId string `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *GetPlaylistRequest) Reset() {
	*x = GetPlaylistRequest{}
	mi := &file_api_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistRequest) ProtoMessage() {}

func (x *GetPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{4}
}

func (x *GetPlaylistRequest) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

type GetPlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist *Playlist `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (x *GetPlaylistResponse) Reset() {
	*x = GetPlaylistResponse{}
	mi := &file_api_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistResponse) ProtoMessage() {}

func (x *GetPlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{5}
}

func (x *GetPlaylistResponse) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

type UpdatePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId string   `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	Title      *string  `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	CoverUrl   *string  `protobuf:"bytes,3,opt,name=cover_url,json=coverUrl,proto3,oneof" json:"cover_url,omitempty"`
	IsPublic   *bool    `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3,oneof" json:"is_public,omitempty"`
	TrackIds   []string `protobuf:"bytes,5,rep,name=track_ids,json=trackIds,proto3" json:"track_ids,omitempty"`
}

func (x *UpdatePlaylistRequest) Reset() {
	*x = UpdatePlaylistRequest{}
	mi := &file_api_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaylistRequest) ProtoMessage() {}

func (x *UpdatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePlaylistRequest) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

func (x *UpdatePlaylistRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdatePlaylistRequest) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

func (x *UpdatePlaylistRequest) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *UpdatePlaylistRequest) GetTrackIds() []string {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

type UpdatePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist *PlaylistMetadata `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (x *UpdatePlaylistResponse) Reset() {
	*x = UpdatePlaylistResponse{}
	mi := &file_api_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaylistResponse) ProtoMessage() {}

func (x *UpdatePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaylistResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePlaylistResponse) GetPlaylist() *PlaylistMetadata {
	if x != nil {
		return x.Playlist
	}
	return nil
}

type DeletePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId []string `protobuf:"bytes,1,rep,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *DeletePlaylistRequest) Reset() {
	*x = DeletePlaylistRequest{}
	mi := &file_api_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlaylistRequest) ProtoMessage() {}

func (x *DeletePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlaylistRequest.ProtoReflect.Descriptor instead.
func (*DeletePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePlaylistRequest) GetPlaylistId() []string {
	if x != nil {
		return x.PlaylistId
	}
	return nil
}

type DeletePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlaylistResponse) Reset() {
	*x = DeletePlaylistResponse{}
	mi := &file_api_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlaylistResponse) ProtoMessage() {}

func (x *DeletePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlaylistResponse.ProtoReflect.Descriptor instead.
func (*DeletePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{9}
}

type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	mi := &file_api_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{10}
}

func (x *PaginationRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	HasNext  bool  `protobuf:"varint,2,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	LastPage int64 `protobuf:"varint,3,opt,name=last_page,json=lastPage,proto3" json:"last_page,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	mi := &file_api_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{11}
}

func (x *PaginationResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PaginationResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *PaginationResponse) GetLastPage() int64 {
	if x != nil {
		return x.LastPage
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filtering queries, mutually exclusive
	ArtistId   *string `protobuf:"bytes,1,opt,name=artist_id,json=artistId,proto3,oneof" json:"artist_id,omitempty"`
	MatchTitle *string `protobuf:"bytes,2,opt,name=match_title,json=matchTitle,proto3,oneof" json:"match_title,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_api_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{12}
}

func (x *Filter) GetArtistId() string {
	if x != nil && x.ArtistId != nil {
		return *x.ArtistId
	}
	return ""
}

func (x *Filter) GetMatchTitle() string {
	if x != nil && x.MatchTitle != nil {
		return *x.MatchTitle
	}
	return ""
}

type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	mi := &file_api_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{13}
}

func (x *Sort) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Sort) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type GetPlaylistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     *Filter            `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Ids don't work with pagination
	Ids []string `protobuf:"bytes,6,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetPlaylistsRequest) Reset() {
	*x = GetPlaylistsRequest{}
	mi := &file_api_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistsRequest) ProtoMessage() {}

func (x *GetPlaylistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistsRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistsRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{14}
}

func (x *GetPlaylistsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetPlaylistsRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetPlaylistsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetPlaylistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists  []*PlaylistMetadata `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetPlaylistsResponse) Reset() {
	*x = GetPlaylistsResponse{}
	mi := &file_api_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistsResponse) ProtoMessage() {}

func (x *GetPlaylistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistsResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistsResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{15}
}

func (x *GetPlaylistsResponse) GetPlaylists() []*PlaylistMetadata {
	if x != nil {
		return x.Playlists
	}
	return nil
}

func (x *GetPlaylistsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CopyPlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId string `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *CopyPlaylistRequest) Reset() {
	*x = CopyPlaylistRequest{}
	mi := &file_api_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyPlaylistRequest) ProtoMessage() {}

func (x *CopyPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyPlaylistRequest.ProtoReflect.Descriptor instead.
func (*CopyPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{16}
}

func (x *CopyPlaylistRequest) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

type CopyPlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId string `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *CopyPlaylistResponse) Reset() {
	*x = CopyPlaylistResponse{}
	mi := &file_api_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyPlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyPlaylistResponse) ProtoMessage() {}

func (x *CopyPlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyPlaylistResponse.ProtoReflect.Descriptor instead.
func (*CopyPlaylistResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{17}
}

func (x *CopyPlaylistResponse) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

type GetMyPlaylistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMyPlaylistsRequest) Reset() {
	*x = GetMyPlaylistsRequest{}
	mi := &file_api_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyPlaylistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyPlaylistsRequest) ProtoMessage() {}

func (x *GetMyPlaylistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyPlaylistsRequest.ProtoReflect.Descriptor instead.
func (*GetMyPlaylistsRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{18}
}

type GetMyPlaylistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*PlaylistMetadata `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *GetMyPlaylistsResponse) Reset() {
	*x = GetMyPlaylistsResponse{}
	mi := &file_api_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyPlaylistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyPlaylistsResponse) ProtoMessage() {}

func (x *GetMyPlaylistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyPlaylistsResponse.ProtoReflect.Descriptor instead.
func (*GetMyPlaylistsResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{19}
}

func (x *GetMyPlaylistsResponse) GetPlaylists() []*PlaylistMetadata {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type GetMyCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMyCollectionRequest) Reset() {
	*x = GetMyCollectionRequest{}
	mi := &file_api_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyCollectionRequest) ProtoMessage() {}

func (x *GetMyCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetMyCollectionRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{20}
}

type GetMyCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist *Playlist `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (x *GetMyCollectionResponse) Reset() {
	*x = GetMyCollectionResponse{}
	mi := &file_api_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyCollectionResponse) ProtoMessage() {}

func (x *GetMyCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyCollectionResponse.ProtoReflect.Descriptor instead.
func (*GetMyCollectionResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{21}
}

func (x *GetMyCollectionResponse) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

type LikeDislikePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId string `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *LikeDislikePlaylistRequest) Reset() {
	*x = LikeDislikePlaylistRequest{}
	mi := &file_api_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeDislikePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeDislikePlaylistRequest) ProtoMessage() {}

func (x *LikeDislikePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeDislikePlaylistRequest.ProtoReflect.Descriptor instead.
func (*LikeDislikePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{22}
}

func (x *LikeDislikePlaylistRequest) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

type LikeDislikePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LikeDislikePlaylistResponse) Reset() {
	*x = LikeDislikePlaylistResponse{}
	mi := &file_api_types_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeDislikePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeDislikePlaylistResponse) ProtoMessage() {}

func (x *LikeDislikePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeDislikePlaylistResponse.ProtoReflect.Descriptor instead.
func (*LikeDislikePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{23}
}

func (x *LikeDislikePlaylistResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LikeDislikeTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId string `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *LikeDislikeTrackRequest) Reset() {
	*x = LikeDislikeTrackRequest{}
	mi := &file_api_types_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeDislikeTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeDislikeTrackRequest) ProtoMessage() {}

func (x *LikeDislikeTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeDislikeTrackRequest.ProtoReflect.Descriptor instead.
func (*LikeDislikeTrackRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{24}
}

func (x *LikeDislikeTrackRequest) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

type LikeDislikeTrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LikeDislikeTrackResponse) Reset() {
	*x = LikeDislikeTrackResponse{}
	mi := &file_api_types_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeDislikeTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeDislikeTrackResponse) ProtoMessage() {}

func (x *LikeDislikeTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeDislikeTrackResponse.ProtoReflect.Descriptor instead.
func (*LikeDislikeTrackResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{25}
}

func (x *LikeDislikeTrackResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetURLPlaylistCoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId string `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *GetURLPlaylistCoverRequest) Reset() {
	*x = GetURLPlaylistCoverRequest{}
	mi := &file_api_types_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetURLPlaylistCoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLPlaylistCoverRequest) ProtoMessage() {}

func (x *GetURLPlaylistCoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLPlaylistCoverRequest.ProtoReflect.Descriptor instead.
func (*GetURLPlaylistCoverRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{26}
}

func (x *GetURLPlaylistCoverRequest) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

type GetURLPlaylistCoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverUrl string `protobuf:"bytes,1,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
}

func (x *GetURLPlaylistCoverResponse) Reset() {
	*x = GetURLPlaylistCoverResponse{}
	mi := &file_api_types_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetURLPlaylistCoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLPlaylistCoverResponse) ProtoMessage() {}

func (x *GetURLPlaylistCoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLPlaylistCoverResponse.ProtoReflect.Descriptor instead.
func (*GetURLPlaylistCoverResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{27}
}

func (x *GetURLPlaylistCoverResponse) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

type GetRawPlaylistCoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawCoverId string `protobuf:"bytes,1,opt,name=raw_cover_id,json=rawCoverId,proto3" json:"raw_cover_id,omitempty"`
}

func (x *GetRawPlaylistCoverRequest) Reset() {
	*x = GetRawPlaylistCoverRequest{}
	mi := &file_api_types_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRawPlaylistCoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawPlaylistCoverRequest) ProtoMessage() {}

func (x *GetRawPlaylistCoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawPlaylistCoverRequest.ProtoReflect.Descriptor instead.
func (*GetRawPlaylistCoverRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{28}
}

func (x *GetRawPlaylistCoverRequest) GetRawCoverId() string {
	if x != nil {
		return x.RawCoverId
	}
	return ""
}

type GetRawPlaylistCoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePart []byte `protobuf:"bytes,1,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
}

func (x *GetRawPlaylistCoverResponse) Reset() {
	*x = GetRawPlaylistCoverResponse{}
	mi := &file_api_types_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRawPlaylistCoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawPlaylistCoverResponse) ProtoMessage() {}

func (x *GetRawPlaylistCoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawPlaylistCoverResponse.ProtoReflect.Descriptor instead.
func (*GetRawPlaylistCoverResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{29}
}

func (x *GetRawPlaylistCoverResponse) GetFilePart() []byte {
	if x != nil {
		return x.FilePart
	}
	return nil
}

type UploadRawPlaylistCoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistId string             `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	FilePart   []byte             `protobuf:"bytes,2,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"` // Max 1MB per part
	Extension  ImageFileExtension `protobuf:"varint,3,opt,name=extension,proto3,enum=playlists_api.ImageFileExtension" json:"extension,omitempty"`
}

func (x *UploadRawPlaylistCoverRequest) Reset() {
	*x = UploadRawPlaylistCoverRequest{}
	mi := &file_api_types_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRawPlaylistCoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRawPlaylistCoverRequest) ProtoMessage() {}

func (x *UploadRawPlaylistCoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRawPlaylistCoverRequest.ProtoReflect.Descriptor instead.
func (*UploadRawPlaylistCoverRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{30}
}

func (x *UploadRawPlaylistCoverRequest) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

func (x *UploadRawPlaylistCoverRequest) GetFilePart() []byte {
	if x != nil {
		return x.FilePart
	}
	return nil
}

func (x *UploadRawPlaylistCoverRequest) GetExtension() ImageFileExtension {
	if x != nil {
		return x.Extension
	}
	return ImageFileExtension_JPEG
}

type UploadRawPlaylistCoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UploadRawPlaylistCoverResponse) Reset() {
	*x = UploadRawPlaylistCoverResponse{}
	mi := &file_api_types_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRawPlaylistCoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRawPlaylistCoverResponse) ProtoMessage() {}

func (x *UploadRawPlaylistCoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRawPlaylistCoverResponse.ProtoReflect.Descriptor instead.
func (*UploadRawPlaylistCoverResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{31}
}

func (x *UploadRawPlaylistCoverResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadRawPlaylistCoverResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ReleaseAlbumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumId string `protobuf:"bytes,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	// true - release album without notifications
	// false - release album with notifications
	SuppressNotifications bool `protobuf:"varint,2,opt,name=suppress_notifications,json=suppressNotifications,proto3" json:"suppress_notifications,omitempty"`
}

func (x *ReleaseAlbumRequest) Reset() {
	*x = ReleaseAlbumRequest{}
	mi := &file_api_types_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseAlbumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseAlbumRequest) ProtoMessage() {}

func (x *ReleaseAlbumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseAlbumRequest.ProtoReflect.Descriptor instead.
func (*ReleaseAlbumRequest) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{32}
}

func (x *ReleaseAlbumRequest) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *ReleaseAlbumRequest) GetSuppressNotifications() bool {
	if x != nil {
		return x.SuppressNotifications
	}
	return false
}

type ReleaseAlbumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReleaseAlbumResponse) Reset() {
	*x = ReleaseAlbumResponse{}
	mi := &file_api_types_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseAlbumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseAlbumResponse) ProtoMessage() {}

func (x *ReleaseAlbumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseAlbumResponse.ProtoReflect.Descriptor instead.
func (*ReleaseAlbumResponse) Descriptor() ([]byte, []int) {
	return file_api_types_proto_rawDescGZIP(), []int{33}
}

func (x *ReleaseAlbumResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_api_types_proto protoreflect.FileDescriptor

var file_api_types_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69,
	0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x6f, 0x6e, 0x67, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb0, 0x03, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0x68, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0x80, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xfa,
	0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x22, 0x4d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x3f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xff, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x22, 0x55, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x1a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x62, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x01, 0x18, 0x40, 0xd0, 0x01, 0x01,
	0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x32, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x92, 0x01,
	0x0c, 0x10, 0xd0, 0x0f, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a,
	0x13, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x14, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x1a, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a,
	0x1b, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x17, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x69,
	0x73, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x69,
	0x73, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x22, 0x3e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x7a, 0x06, 0x10, 0x01, 0x18, 0x80, 0x80, 0x40,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x7a,
	0x06, 0x10, 0x01, 0x18, 0x80, 0x80, 0x40, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x1e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x77, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x71, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x30, 0x0a, 0x12, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49, 0x46, 0x10, 0x02, 0x42, 0x40, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x72, 0x6a, 0x61, 0x37, 0x32, 0x2e, 0x72,
	0x75, 0x2f, 0x67, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x30, 0x32, 0x2f,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_types_proto_rawDescOnce sync.Once
	file_api_types_proto_rawDescData = file_api_types_proto_rawDesc
)

func file_api_types_proto_rawDescGZIP() []byte {
	file_api_types_proto_rawDescOnce.Do(func() {
		file_api_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_types_proto_rawDescData)
	})
	return file_api_types_proto_rawDescData
}

var file_api_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_types_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_api_types_proto_goTypes = []any{
	(ImageFileExtension)(0),                // 0: playlists_api.ImageFileExtension
	(*PlaylistMetadata)(nil),               // 1: playlists_api.PlaylistMetadata
	(*Playlist)(nil),                       // 2: playlists_api.Playlist
	(*CreatePlaylistRequest)(nil),          // 3: playlists_api.CreatePlaylistRequest
	(*CreatePlaylistResponse)(nil),         // 4: playlists_api.CreatePlaylistResponse
	(*GetPlaylistRequest)(nil),             // 5: playlists_api.GetPlaylistRequest
	(*GetPlaylistResponse)(nil),            // 6: playlists_api.GetPlaylistResponse
	(*UpdatePlaylistRequest)(nil),          // 7: playlists_api.UpdatePlaylistRequest
	(*UpdatePlaylistResponse)(nil),         // 8: playlists_api.UpdatePlaylistResponse
	(*DeletePlaylistRequest)(nil),          // 9: playlists_api.DeletePlaylistRequest
	(*DeletePlaylistResponse)(nil),         // 10: playlists_api.DeletePlaylistResponse
	(*PaginationRequest)(nil),              // 11: playlists_api.PaginationRequest
	(*PaginationResponse)(nil),             // 12: playlists_api.PaginationResponse
	(*Filter)(nil),                         // 13: playlists_api.Filter
	(*Sort)(nil),                           // 14: playlists_api.Sort
	(*GetPlaylistsRequest)(nil),            // 15: playlists_api.GetPlaylistsRequest
	(*GetPlaylistsResponse)(nil),           // 16: playlists_api.GetPlaylistsResponse
	(*CopyPlaylistRequest)(nil),            // 17: playlists_api.CopyPlaylistRequest
	(*CopyPlaylistResponse)(nil),           // 18: playlists_api.CopyPlaylistResponse
	(*GetMyPlaylistsRequest)(nil),          // 19: playlists_api.GetMyPlaylistsRequest
	(*GetMyPlaylistsResponse)(nil),         // 20: playlists_api.GetMyPlaylistsResponse
	(*GetMyCollectionRequest)(nil),         // 21: playlists_api.GetMyCollectionRequest
	(*GetMyCollectionResponse)(nil),        // 22: playlists_api.GetMyCollectionResponse
	(*LikeDislikePlaylistRequest)(nil),     // 23: playlists_api.LikeDislikePlaylistRequest
	(*LikeDislikePlaylistResponse)(nil),    // 24: playlists_api.LikeDislikePlaylistResponse
	(*LikeDislikeTrackRequest)(nil),        // 25: playlists_api.LikeDislikeTrackRequest
	(*LikeDislikeTrackResponse)(nil),       // 26: playlists_api.LikeDislikeTrackResponse
	(*GetURLPlaylistCoverRequest)(nil),     // 27: playlists_api.GetURLPlaylistCoverRequest
	(*GetURLPlaylistCoverResponse)(nil),    // 28: playlists_api.GetURLPlaylistCoverResponse
	(*GetRawPlaylistCoverRequest)(nil),     // 29: playlists_api.GetRawPlaylistCoverRequest
	(*GetRawPlaylistCoverResponse)(nil),    // 30: playlists_api.GetRawPlaylistCoverResponse
	(*UploadRawPlaylistCoverRequest)(nil),  // 31: playlists_api.UploadRawPlaylistCoverRequest
	(*UploadRawPlaylistCoverResponse)(nil), // 32: playlists_api.UploadRawPlaylistCoverResponse
	(*ReleaseAlbumRequest)(nil),            // 33: playlists_api.ReleaseAlbumRequest
	(*ReleaseAlbumResponse)(nil),           // 34: playlists_api.ReleaseAlbumResponse
	(*timestamppb.Timestamp)(nil),          // 35: google.protobuf.Timestamp
	(*protogen.Song)(nil),                  // 36: api.Song
}
var file_api_types_proto_depIdxs = []int32{
	35, // 0: playlists_api.PlaylistMetadata.created_at:type_name -> google.protobuf.Timestamp
	35, // 1: playlists_api.PlaylistMetadata.updated_at:type_name -> google.protobuf.Timestamp
	35, // 2: playlists_api.PlaylistMetadata.released_at:type_name -> google.protobuf.Timestamp
	1,  // 3: playlists_api.Playlist.metadata:type_name -> playlists_api.PlaylistMetadata
	36, // 4: playlists_api.Playlist.songs:type_name -> api.Song
	2,  // 5: playlists_api.CreatePlaylistResponse.playlist:type_name -> playlists_api.Playlist
	2,  // 6: playlists_api.GetPlaylistResponse.playlist:type_name -> playlists_api.Playlist
	1,  // 7: playlists_api.UpdatePlaylistResponse.playlist:type_name -> playlists_api.PlaylistMetadata
	11, // 8: playlists_api.GetPlaylistsRequest.pagination:type_name -> playlists_api.PaginationRequest
	13, // 9: playlists_api.GetPlaylistsRequest.filter:type_name -> playlists_api.Filter
	1,  // 10: playlists_api.GetPlaylistsResponse.playlists:type_name -> playlists_api.PlaylistMetadata
	12, // 11: playlists_api.GetPlaylistsResponse.pagination:type_name -> playlists_api.PaginationResponse
	1,  // 12: playlists_api.GetMyPlaylistsResponse.playlists:type_name -> playlists_api.PlaylistMetadata
	2,  // 13: playlists_api.GetMyCollectionResponse.playlist:type_name -> playlists_api.Playlist
	0,  // 14: playlists_api.UploadRawPlaylistCoverRequest.extension:type_name -> playlists_api.ImageFileExtension
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_types_proto_init() }
func file_api_types_proto_init() {
	if File_api_types_proto != nil {
		return
	}
	file_api_types_proto_msgTypes[0].OneofWrappers = []any{}
	file_api_types_proto_msgTypes[6].OneofWrappers = []any{}
	file_api_types_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_types_proto_goTypes,
		DependencyIndexes: file_api_types_proto_depIdxs,
		EnumInfos:         file_api_types_proto_enumTypes,
		MessageInfos:      file_api_types_proto_msgTypes,
	}.Build()
	File_api_types_proto = out.File
	file_api_types_proto_rawDesc = nil
	file_api_types_proto_goTypes = nil
	file_api_types_proto_depIdxs = nil
}
