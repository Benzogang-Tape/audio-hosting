// Code generated by mockery v2.50.0. DO NOT EDIT.

package coversmocks

import (
	context "context"

	io "io"

	minio "github.com/Benzogang-Tape/audio-hosting/playlists/internal/storage/minio"

	mock "github.com/stretchr/testify/mock"
)

// ObjectRepository is an autogenerated mock type for the ObjectRepository type
type ObjectRepository struct {
	mock.Mock
}

type ObjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ObjectRepository) EXPECT() *ObjectRepository_Expecter {
	return &ObjectRepository_Expecter{mock: &_m.Mock}
}

// GetCoverObject provides a mock function with given fields: ctx, id
func (_m *ObjectRepository) GetCoverObject(ctx context.Context, id string) (io.Reader, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCoverObject")
	}

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.Reader, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Reader); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectRepository_GetCoverObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoverObject'
type ObjectRepository_GetCoverObject_Call struct {
	*mock.Call
}

// GetCoverObject is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ObjectRepository_Expecter) GetCoverObject(ctx interface{}, id interface{}) *ObjectRepository_GetCoverObject_Call {
	return &ObjectRepository_GetCoverObject_Call{Call: _e.mock.On("GetCoverObject", ctx, id)}
}

func (_c *ObjectRepository_GetCoverObject_Call) Run(run func(ctx context.Context, id string)) *ObjectRepository_GetCoverObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ObjectRepository_GetCoverObject_Call) Return(_a0 io.Reader, _a1 error) *ObjectRepository_GetCoverObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ObjectRepository_GetCoverObject_Call) RunAndReturn(run func(context.Context, string) (io.Reader, error)) *ObjectRepository_GetCoverObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutCoverObject provides a mock function with given fields: ctx, image
func (_m *ObjectRepository) PutCoverObject(ctx context.Context, image minio.CoverObject) error {
	ret := _m.Called(ctx, image)

	if len(ret) == 0 {
		panic("no return value specified for PutCoverObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, minio.CoverObject) error); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectRepository_PutCoverObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutCoverObject'
type ObjectRepository_PutCoverObject_Call struct {
	*mock.Call
}

// PutCoverObject is a helper method to define mock.On call
//   - ctx context.Context
//   - image minio.CoverObject
func (_e *ObjectRepository_Expecter) PutCoverObject(ctx interface{}, image interface{}) *ObjectRepository_PutCoverObject_Call {
	return &ObjectRepository_PutCoverObject_Call{Call: _e.mock.On("PutCoverObject", ctx, image)}
}

func (_c *ObjectRepository_PutCoverObject_Call) Run(run func(ctx context.Context, image minio.CoverObject)) *ObjectRepository_PutCoverObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(minio.CoverObject))
	})
	return _c
}

func (_c *ObjectRepository_PutCoverObject_Call) Return(_a0 error) *ObjectRepository_PutCoverObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectRepository_PutCoverObject_Call) RunAndReturn(run func(context.Context, minio.CoverObject) error) *ObjectRepository_PutCoverObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewObjectRepository creates a new instance of ObjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObjectRepository {
	mock := &ObjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
