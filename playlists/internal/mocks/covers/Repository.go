// Code generated by mockery v2.50.0. DO NOT EDIT.

package coversmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	covers "github.com/Benzogang-Tape/audio-hosting/playlists/internal/service/covers"

	postgres "github.com/Benzogang-Tape/audio-hosting/playlists/internal/storage/postgres"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// BeginCovers provides a mock function with given fields: ctx
func (_m *Repository) BeginCovers(ctx context.Context) (covers.Repository, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginCovers")
	}

	var r0 covers.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (covers.Repository, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) covers.Repository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(covers.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_BeginCovers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginCovers'
type Repository_BeginCovers_Call struct {
	*mock.Call
}

// BeginCovers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) BeginCovers(ctx interface{}) *Repository_BeginCovers_Call {
	return &Repository_BeginCovers_Call{Call: _e.mock.On("BeginCovers", ctx)}
}

func (_c *Repository_BeginCovers_Call) Run(run func(ctx context.Context)) *Repository_BeginCovers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_BeginCovers_Call) Return(_a0 covers.Repository, _a1 error) *Repository_BeginCovers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_BeginCovers_Call) RunAndReturn(run func(context.Context) (covers.Repository, error)) *Repository_BeginCovers_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *Repository) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Repository_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) Commit(ctx interface{}) *Repository_Commit_Call {
	return &Repository_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *Repository_Commit_Call) Run(run func(ctx context.Context)) *Repository_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_Commit_Call) Return(_a0 error) *Repository_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Commit_Call) RunAndReturn(run func(context.Context) error) *Repository_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPlaylist provides a mock function with given fields: ctx, arg
func (_m *Repository) PatchPlaylist(ctx context.Context, arg postgres.PatchPlaylistParams) (postgres.Playlist, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for PatchPlaylist")
	}

	var r0 postgres.Playlist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.PatchPlaylistParams) (postgres.Playlist, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.PatchPlaylistParams) postgres.Playlist); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(postgres.Playlist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.PatchPlaylistParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_PatchPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPlaylist'
type Repository_PatchPlaylist_Call struct {
	*mock.Call
}

// PatchPlaylist is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.PatchPlaylistParams
func (_e *Repository_Expecter) PatchPlaylist(ctx interface{}, arg interface{}) *Repository_PatchPlaylist_Call {
	return &Repository_PatchPlaylist_Call{Call: _e.mock.On("PatchPlaylist", ctx, arg)}
}

func (_c *Repository_PatchPlaylist_Call) Run(run func(ctx context.Context, arg postgres.PatchPlaylistParams)) *Repository_PatchPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.PatchPlaylistParams))
	})
	return _c
}

func (_c *Repository_PatchPlaylist_Call) Return(_a0 postgres.Playlist, _a1 error) *Repository_PatchPlaylist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_PatchPlaylist_Call) RunAndReturn(run func(context.Context, postgres.PatchPlaylistParams) (postgres.Playlist, error)) *Repository_PatchPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// Playlist provides a mock function with given fields: ctx, id
func (_m *Repository) Playlist(ctx context.Context, id uuid.UUID) (postgres.PlaylistRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Playlist")
	}

	var r0 postgres.PlaylistRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (postgres.PlaylistRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) postgres.PlaylistRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(postgres.PlaylistRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Playlist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Playlist'
type Repository_Playlist_Call struct {
	*mock.Call
}

// Playlist is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repository_Expecter) Playlist(ctx interface{}, id interface{}) *Repository_Playlist_Call {
	return &Repository_Playlist_Call{Call: _e.mock.On("Playlist", ctx, id)}
}

func (_c *Repository_Playlist_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repository_Playlist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_Playlist_Call) Return(_a0 postgres.PlaylistRow, _a1 error) *Repository_Playlist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Playlist_Call) RunAndReturn(run func(context.Context, uuid.UUID) (postgres.PlaylistRow, error)) *Repository_Playlist_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *Repository) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Repository_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) Rollback(ctx interface{}) *Repository_Rollback_Call {
	return &Repository_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *Repository_Rollback_Call) Run(run func(ctx context.Context)) *Repository_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_Rollback_Call) Return(_a0 error) *Repository_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Rollback_Call) RunAndReturn(run func(context.Context) error) *Repository_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
