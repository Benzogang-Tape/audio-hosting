// Code generated by mockery v2.50.0. DO NOT EDIT.

package playlistsmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	playlists "github.com/Benzogang-Tape/audio-hosting/playlists/internal/service/playlists"

	postgres "github.com/Benzogang-Tape/audio-hosting/playlists/internal/storage/postgres"

	uuid "github.com/google/uuid"
)

// PlaylistsRepo is an autogenerated mock type for the PlaylistsRepo type
type PlaylistsRepo struct {
	mock.Mock
}

type PlaylistsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *PlaylistsRepo) EXPECT() *PlaylistsRepo_Expecter {
	return &PlaylistsRepo_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *PlaylistsRepo) Begin(ctx context.Context) (playlists.PlaylistsRepo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 playlists.PlaylistsRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (playlists.PlaylistsRepo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) playlists.PlaylistsRepo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playlists.PlaylistsRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type PlaylistsRepo_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PlaylistsRepo_Expecter) Begin(ctx interface{}) *PlaylistsRepo_Begin_Call {
	return &PlaylistsRepo_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *PlaylistsRepo_Begin_Call) Run(run func(ctx context.Context)) *PlaylistsRepo_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PlaylistsRepo_Begin_Call) Return(_a0 playlists.PlaylistsRepo, _a1 error) *PlaylistsRepo_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_Begin_Call) RunAndReturn(run func(context.Context) (playlists.PlaylistsRepo, error)) *PlaylistsRepo_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *PlaylistsRepo) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlaylistsRepo_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type PlaylistsRepo_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PlaylistsRepo_Expecter) Commit(ctx interface{}) *PlaylistsRepo_Commit_Call {
	return &PlaylistsRepo_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *PlaylistsRepo_Commit_Call) Run(run func(ctx context.Context)) *PlaylistsRepo_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PlaylistsRepo_Commit_Call) Return(_a0 error) *PlaylistsRepo_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlaylistsRepo_Commit_Call) RunAndReturn(run func(context.Context) error) *PlaylistsRepo_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// CopyPlaylist provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) CopyPlaylist(ctx context.Context, arg postgres.CopyPlaylistParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CopyPlaylist")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CopyPlaylistParams) (uuid.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CopyPlaylistParams) uuid.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.CopyPlaylistParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_CopyPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyPlaylist'
type PlaylistsRepo_CopyPlaylist_Call struct {
	*mock.Call
}

// CopyPlaylist is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.CopyPlaylistParams
func (_e *PlaylistsRepo_Expecter) CopyPlaylist(ctx interface{}, arg interface{}) *PlaylistsRepo_CopyPlaylist_Call {
	return &PlaylistsRepo_CopyPlaylist_Call{Call: _e.mock.On("CopyPlaylist", ctx, arg)}
}

func (_c *PlaylistsRepo_CopyPlaylist_Call) Run(run func(ctx context.Context, arg postgres.CopyPlaylistParams)) *PlaylistsRepo_CopyPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.CopyPlaylistParams))
	})
	return _c
}

func (_c *PlaylistsRepo_CopyPlaylist_Call) Return(_a0 uuid.UUID, _a1 error) *PlaylistsRepo_CopyPlaylist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_CopyPlaylist_Call) RunAndReturn(run func(context.Context, postgres.CopyPlaylistParams) (uuid.UUID, error)) *PlaylistsRepo_CopyPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePlaylists provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) DeletePlaylists(ctx context.Context, arg postgres.DeletePlaylistsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlaylists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.DeletePlaylistsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlaylistsRepo_DeletePlaylists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePlaylists'
type PlaylistsRepo_DeletePlaylists_Call struct {
	*mock.Call
}

// DeletePlaylists is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.DeletePlaylistsParams
func (_e *PlaylistsRepo_Expecter) DeletePlaylists(ctx interface{}, arg interface{}) *PlaylistsRepo_DeletePlaylists_Call {
	return &PlaylistsRepo_DeletePlaylists_Call{Call: _e.mock.On("DeletePlaylists", ctx, arg)}
}

func (_c *PlaylistsRepo_DeletePlaylists_Call) Run(run func(ctx context.Context, arg postgres.DeletePlaylistsParams)) *PlaylistsRepo_DeletePlaylists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.DeletePlaylistsParams))
	})
	return _c
}

func (_c *PlaylistsRepo_DeletePlaylists_Call) Return(_a0 error) *PlaylistsRepo_DeletePlaylists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlaylistsRepo_DeletePlaylists_Call) RunAndReturn(run func(context.Context, postgres.DeletePlaylistsParams) error) *PlaylistsRepo_DeletePlaylists_Call {
	_c.Call.Return(run)
	return _c
}

// DislikePlaylist provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) DislikePlaylist(ctx context.Context, arg postgres.DislikePlaylistParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DislikePlaylist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.DislikePlaylistParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlaylistsRepo_DislikePlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DislikePlaylist'
type PlaylistsRepo_DislikePlaylist_Call struct {
	*mock.Call
}

// DislikePlaylist is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.DislikePlaylistParams
func (_e *PlaylistsRepo_Expecter) DislikePlaylist(ctx interface{}, arg interface{}) *PlaylistsRepo_DislikePlaylist_Call {
	return &PlaylistsRepo_DislikePlaylist_Call{Call: _e.mock.On("DislikePlaylist", ctx, arg)}
}

func (_c *PlaylistsRepo_DislikePlaylist_Call) Run(run func(ctx context.Context, arg postgres.DislikePlaylistParams)) *PlaylistsRepo_DislikePlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.DislikePlaylistParams))
	})
	return _c
}

func (_c *PlaylistsRepo_DislikePlaylist_Call) Return(_a0 error) *PlaylistsRepo_DislikePlaylist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlaylistsRepo_DislikePlaylist_Call) RunAndReturn(run func(context.Context, postgres.DislikePlaylistParams) error) *PlaylistsRepo_DislikePlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// DislikeTrack provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) DislikeTrack(ctx context.Context, arg postgres.DislikeTrackParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DislikeTrack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.DislikeTrackParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlaylistsRepo_DislikeTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DislikeTrack'
type PlaylistsRepo_DislikeTrack_Call struct {
	*mock.Call
}

// DislikeTrack is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.DislikeTrackParams
func (_e *PlaylistsRepo_Expecter) DislikeTrack(ctx interface{}, arg interface{}) *PlaylistsRepo_DislikeTrack_Call {
	return &PlaylistsRepo_DislikeTrack_Call{Call: _e.mock.On("DislikeTrack", ctx, arg)}
}

func (_c *PlaylistsRepo_DislikeTrack_Call) Run(run func(ctx context.Context, arg postgres.DislikeTrackParams)) *PlaylistsRepo_DislikeTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.DislikeTrackParams))
	})
	return _c
}

func (_c *PlaylistsRepo_DislikeTrack_Call) Return(_a0 error) *PlaylistsRepo_DislikeTrack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlaylistsRepo_DislikeTrack_Call) RunAndReturn(run func(context.Context, postgres.DislikeTrackParams) error) *PlaylistsRepo_DislikeTrack_Call {
	_c.Call.Return(run)
	return _c
}

// LikePlaylist provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) LikePlaylist(ctx context.Context, arg postgres.LikePlaylistParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for LikePlaylist")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.LikePlaylistParams) (uuid.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.LikePlaylistParams) uuid.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.LikePlaylistParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_LikePlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikePlaylist'
type PlaylistsRepo_LikePlaylist_Call struct {
	*mock.Call
}

// LikePlaylist is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.LikePlaylistParams
func (_e *PlaylistsRepo_Expecter) LikePlaylist(ctx interface{}, arg interface{}) *PlaylistsRepo_LikePlaylist_Call {
	return &PlaylistsRepo_LikePlaylist_Call{Call: _e.mock.On("LikePlaylist", ctx, arg)}
}

func (_c *PlaylistsRepo_LikePlaylist_Call) Run(run func(ctx context.Context, arg postgres.LikePlaylistParams)) *PlaylistsRepo_LikePlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.LikePlaylistParams))
	})
	return _c
}

func (_c *PlaylistsRepo_LikePlaylist_Call) Return(_a0 uuid.UUID, _a1 error) *PlaylistsRepo_LikePlaylist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_LikePlaylist_Call) RunAndReturn(run func(context.Context, postgres.LikePlaylistParams) (uuid.UUID, error)) *PlaylistsRepo_LikePlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// LikeTrack provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) LikeTrack(ctx context.Context, arg postgres.LikeTrackParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for LikeTrack")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.LikeTrackParams) (uuid.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.LikeTrackParams) uuid.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.LikeTrackParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_LikeTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikeTrack'
type PlaylistsRepo_LikeTrack_Call struct {
	*mock.Call
}

// LikeTrack is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.LikeTrackParams
func (_e *PlaylistsRepo_Expecter) LikeTrack(ctx interface{}, arg interface{}) *PlaylistsRepo_LikeTrack_Call {
	return &PlaylistsRepo_LikeTrack_Call{Call: _e.mock.On("LikeTrack", ctx, arg)}
}

func (_c *PlaylistsRepo_LikeTrack_Call) Run(run func(ctx context.Context, arg postgres.LikeTrackParams)) *PlaylistsRepo_LikeTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.LikeTrackParams))
	})
	return _c
}

func (_c *PlaylistsRepo_LikeTrack_Call) Return(_a0 uuid.UUID, _a1 error) *PlaylistsRepo_LikeTrack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_LikeTrack_Call) RunAndReturn(run func(context.Context, postgres.LikeTrackParams) (uuid.UUID, error)) *PlaylistsRepo_LikeTrack_Call {
	_c.Call.Return(run)
	return _c
}

// MyCollection provides a mock function with given fields: ctx, userID
func (_m *PlaylistsRepo) MyCollection(ctx context.Context, userID uuid.UUID) ([]postgres.MyCollectionRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for MyCollection")
	}

	var r0 []postgres.MyCollectionRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]postgres.MyCollectionRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []postgres.MyCollectionRow); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.MyCollectionRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_MyCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MyCollection'
type PlaylistsRepo_MyCollection_Call struct {
	*mock.Call
}

// MyCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *PlaylistsRepo_Expecter) MyCollection(ctx interface{}, userID interface{}) *PlaylistsRepo_MyCollection_Call {
	return &PlaylistsRepo_MyCollection_Call{Call: _e.mock.On("MyCollection", ctx, userID)}
}

func (_c *PlaylistsRepo_MyCollection_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *PlaylistsRepo_MyCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlaylistsRepo_MyCollection_Call) Return(_a0 []postgres.MyCollectionRow, _a1 error) *PlaylistsRepo_MyCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_MyCollection_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]postgres.MyCollectionRow, error)) *PlaylistsRepo_MyCollection_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPlaylist provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) PatchPlaylist(ctx context.Context, arg postgres.PatchPlaylistParams) (postgres.Playlist, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for PatchPlaylist")
	}

	var r0 postgres.Playlist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.PatchPlaylistParams) (postgres.Playlist, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.PatchPlaylistParams) postgres.Playlist); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(postgres.Playlist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.PatchPlaylistParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_PatchPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPlaylist'
type PlaylistsRepo_PatchPlaylist_Call struct {
	*mock.Call
}

// PatchPlaylist is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.PatchPlaylistParams
func (_e *PlaylistsRepo_Expecter) PatchPlaylist(ctx interface{}, arg interface{}) *PlaylistsRepo_PatchPlaylist_Call {
	return &PlaylistsRepo_PatchPlaylist_Call{Call: _e.mock.On("PatchPlaylist", ctx, arg)}
}

func (_c *PlaylistsRepo_PatchPlaylist_Call) Run(run func(ctx context.Context, arg postgres.PatchPlaylistParams)) *PlaylistsRepo_PatchPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.PatchPlaylistParams))
	})
	return _c
}

func (_c *PlaylistsRepo_PatchPlaylist_Call) Return(_a0 postgres.Playlist, _a1 error) *PlaylistsRepo_PatchPlaylist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_PatchPlaylist_Call) RunAndReturn(run func(context.Context, postgres.PatchPlaylistParams) (postgres.Playlist, error)) *PlaylistsRepo_PatchPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// Playlist provides a mock function with given fields: ctx, id
func (_m *PlaylistsRepo) Playlist(ctx context.Context, id uuid.UUID) (postgres.PlaylistRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Playlist")
	}

	var r0 postgres.PlaylistRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (postgres.PlaylistRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) postgres.PlaylistRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(postgres.PlaylistRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_Playlist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Playlist'
type PlaylistsRepo_Playlist_Call struct {
	*mock.Call
}

// Playlist is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PlaylistsRepo_Expecter) Playlist(ctx interface{}, id interface{}) *PlaylistsRepo_Playlist_Call {
	return &PlaylistsRepo_Playlist_Call{Call: _e.mock.On("Playlist", ctx, id)}
}

func (_c *PlaylistsRepo_Playlist_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PlaylistsRepo_Playlist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlaylistsRepo_Playlist_Call) Return(_a0 postgres.PlaylistRow, _a1 error) *PlaylistsRepo_Playlist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_Playlist_Call) RunAndReturn(run func(context.Context, uuid.UUID) (postgres.PlaylistRow, error)) *PlaylistsRepo_Playlist_Call {
	_c.Call.Return(run)
	return _c
}

// PublicPlaylists provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) PublicPlaylists(ctx context.Context, arg postgres.PublicPlaylistsParams) ([]postgres.PublicPlaylistsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for PublicPlaylists")
	}

	var r0 []postgres.PublicPlaylistsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.PublicPlaylistsParams) ([]postgres.PublicPlaylistsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.PublicPlaylistsParams) []postgres.PublicPlaylistsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.PublicPlaylistsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.PublicPlaylistsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_PublicPlaylists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicPlaylists'
type PlaylistsRepo_PublicPlaylists_Call struct {
	*mock.Call
}

// PublicPlaylists is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.PublicPlaylistsParams
func (_e *PlaylistsRepo_Expecter) PublicPlaylists(ctx interface{}, arg interface{}) *PlaylistsRepo_PublicPlaylists_Call {
	return &PlaylistsRepo_PublicPlaylists_Call{Call: _e.mock.On("PublicPlaylists", ctx, arg)}
}

func (_c *PlaylistsRepo_PublicPlaylists_Call) Run(run func(ctx context.Context, arg postgres.PublicPlaylistsParams)) *PlaylistsRepo_PublicPlaylists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.PublicPlaylistsParams))
	})
	return _c
}

func (_c *PlaylistsRepo_PublicPlaylists_Call) Return(_a0 []postgres.PublicPlaylistsRow, _a1 error) *PlaylistsRepo_PublicPlaylists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_PublicPlaylists_Call) RunAndReturn(run func(context.Context, postgres.PublicPlaylistsParams) ([]postgres.PublicPlaylistsRow, error)) *PlaylistsRepo_PublicPlaylists_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *PlaylistsRepo) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlaylistsRepo_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type PlaylistsRepo_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PlaylistsRepo_Expecter) Rollback(ctx interface{}) *PlaylistsRepo_Rollback_Call {
	return &PlaylistsRepo_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *PlaylistsRepo_Rollback_Call) Run(run func(ctx context.Context)) *PlaylistsRepo_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PlaylistsRepo_Rollback_Call) Return(_a0 error) *PlaylistsRepo_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlaylistsRepo_Rollback_Call) RunAndReturn(run func(context.Context) error) *PlaylistsRepo_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// SavePlaylist provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) SavePlaylist(ctx context.Context, arg postgres.SavePlaylistParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SavePlaylist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.SavePlaylistParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlaylistsRepo_SavePlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePlaylist'
type PlaylistsRepo_SavePlaylist_Call struct {
	*mock.Call
}

// SavePlaylist is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.SavePlaylistParams
func (_e *PlaylistsRepo_Expecter) SavePlaylist(ctx interface{}, arg interface{}) *PlaylistsRepo_SavePlaylist_Call {
	return &PlaylistsRepo_SavePlaylist_Call{Call: _e.mock.On("SavePlaylist", ctx, arg)}
}

func (_c *PlaylistsRepo_SavePlaylist_Call) Run(run func(ctx context.Context, arg postgres.SavePlaylistParams)) *PlaylistsRepo_SavePlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.SavePlaylistParams))
	})
	return _c
}

func (_c *PlaylistsRepo_SavePlaylist_Call) Return(_a0 error) *PlaylistsRepo_SavePlaylist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlaylistsRepo_SavePlaylist_Call) RunAndReturn(run func(context.Context, postgres.SavePlaylistParams) error) *PlaylistsRepo_SavePlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePlaylist provides a mock function with given fields: ctx, arg
func (_m *PlaylistsRepo) UpdatePlaylist(ctx context.Context, arg postgres.UpdatePlaylistParams) (postgres.Playlist, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlaylist")
	}

	var r0 postgres.Playlist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.UpdatePlaylistParams) (postgres.Playlist, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.UpdatePlaylistParams) postgres.Playlist); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(postgres.Playlist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.UpdatePlaylistParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_UpdatePlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePlaylist'
type PlaylistsRepo_UpdatePlaylist_Call struct {
	*mock.Call
}

// UpdatePlaylist is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.UpdatePlaylistParams
func (_e *PlaylistsRepo_Expecter) UpdatePlaylist(ctx interface{}, arg interface{}) *PlaylistsRepo_UpdatePlaylist_Call {
	return &PlaylistsRepo_UpdatePlaylist_Call{Call: _e.mock.On("UpdatePlaylist", ctx, arg)}
}

func (_c *PlaylistsRepo_UpdatePlaylist_Call) Run(run func(ctx context.Context, arg postgres.UpdatePlaylistParams)) *PlaylistsRepo_UpdatePlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(postgres.UpdatePlaylistParams))
	})
	return _c
}

func (_c *PlaylistsRepo_UpdatePlaylist_Call) Return(_a0 postgres.Playlist, _a1 error) *PlaylistsRepo_UpdatePlaylist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_UpdatePlaylist_Call) RunAndReturn(run func(context.Context, postgres.UpdatePlaylistParams) (postgres.Playlist, error)) *PlaylistsRepo_UpdatePlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// UserPlaylists provides a mock function with given fields: ctx, userID
func (_m *PlaylistsRepo) UserPlaylists(ctx context.Context, userID uuid.UUID) ([]postgres.UserPlaylistsRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UserPlaylists")
	}

	var r0 []postgres.UserPlaylistsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]postgres.UserPlaylistsRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []postgres.UserPlaylistsRow); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.UserPlaylistsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaylistsRepo_UserPlaylists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserPlaylists'
type PlaylistsRepo_UserPlaylists_Call struct {
	*mock.Call
}

// UserPlaylists is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *PlaylistsRepo_Expecter) UserPlaylists(ctx interface{}, userID interface{}) *PlaylistsRepo_UserPlaylists_Call {
	return &PlaylistsRepo_UserPlaylists_Call{Call: _e.mock.On("UserPlaylists", ctx, userID)}
}

func (_c *PlaylistsRepo_UserPlaylists_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *PlaylistsRepo_UserPlaylists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlaylistsRepo_UserPlaylists_Call) Return(_a0 []postgres.UserPlaylistsRow, _a1 error) *PlaylistsRepo_UserPlaylists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaylistsRepo_UserPlaylists_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]postgres.UserPlaylistsRow, error)) *PlaylistsRepo_UserPlaylists_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlaylistsRepo creates a new instance of PlaylistsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlaylistsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlaylistsRepo {
	mock := &PlaylistsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
