// Code generated by mockery v2.50.0. DO NOT EDIT.

package playlistsmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	songs "github.com/Benzogang-Tape/audio-hosting/playlists/internal/client/songs"
)

// SongsRepo is an autogenerated mock type for the SongsRepo type
type SongsRepo struct {
	mock.Mock
}

type SongsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SongsRepo) EXPECT() *SongsRepo_Expecter {
	return &SongsRepo_Expecter{mock: &_m.Mock}
}

// GetSong provides a mock function with given fields: ctx, id
func (_m *SongsRepo) GetSong(ctx context.Context, id string) (songs.Song, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSong")
	}

	var r0 songs.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (songs.Song, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) songs.Song); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(songs.Song)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsRepo_GetSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSong'
type SongsRepo_GetSong_Call struct {
	*mock.Call
}

// GetSong is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *SongsRepo_Expecter) GetSong(ctx interface{}, id interface{}) *SongsRepo_GetSong_Call {
	return &SongsRepo_GetSong_Call{Call: _e.mock.On("GetSong", ctx, id)}
}

func (_c *SongsRepo_GetSong_Call) Run(run func(ctx context.Context, id string)) *SongsRepo_GetSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SongsRepo_GetSong_Call) Return(_a0 songs.Song, _a1 error) *SongsRepo_GetSong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsRepo_GetSong_Call) RunAndReturn(run func(context.Context, string) (songs.Song, error)) *SongsRepo_GetSong_Call {
	_c.Call.Return(run)
	return _c
}

// GetSongs provides a mock function with given fields: ctx, id
func (_m *SongsRepo) GetSongs(ctx context.Context, id []string) ([]songs.Song, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSongs")
	}

	var r0 []songs.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]songs.Song, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []songs.Song); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]songs.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsRepo_GetSongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSongs'
type SongsRepo_GetSongs_Call struct {
	*mock.Call
}

// GetSongs is a helper method to define mock.On call
//   - ctx context.Context
//   - id []string
func (_e *SongsRepo_Expecter) GetSongs(ctx interface{}, id interface{}) *SongsRepo_GetSongs_Call {
	return &SongsRepo_GetSongs_Call{Call: _e.mock.On("GetSongs", ctx, id)}
}

func (_c *SongsRepo_GetSongs_Call) Run(run func(ctx context.Context, id []string)) *SongsRepo_GetSongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *SongsRepo_GetSongs_Call) Return(_a0 []songs.Song, _a1 error) *SongsRepo_GetSongs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsRepo_GetSongs_Call) RunAndReturn(run func(context.Context, []string) ([]songs.Song, error)) *SongsRepo_GetSongs_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseSongs provides a mock function with given fields: ctx, ids
func (_m *SongsRepo) ReleaseSongs(ctx context.Context, ids []string) error {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseSongs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongsRepo_ReleaseSongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseSongs'
type SongsRepo_ReleaseSongs_Call struct {
	*mock.Call
}

// ReleaseSongs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *SongsRepo_Expecter) ReleaseSongs(ctx interface{}, ids interface{}) *SongsRepo_ReleaseSongs_Call {
	return &SongsRepo_ReleaseSongs_Call{Call: _e.mock.On("ReleaseSongs", ctx, ids)}
}

func (_c *SongsRepo_ReleaseSongs_Call) Run(run func(ctx context.Context, ids []string)) *SongsRepo_ReleaseSongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *SongsRepo_ReleaseSongs_Call) Return(_a0 error) *SongsRepo_ReleaseSongs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongsRepo_ReleaseSongs_Call) RunAndReturn(run func(context.Context, []string) error) *SongsRepo_ReleaseSongs_Call {
	_c.Call.Return(run)
	return _c
}

// NewSongsRepo creates a new instance of SongsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongsRepo {
	mock := &SongsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
